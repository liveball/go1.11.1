/*
 * Generated by Aspector. DO NOT EDIT!
 */

package main

import (
	aspector "github.com/let-z-go/aspector"
)

type GreeterWrap struct {
	Origin Greeter

	methodInterceptors []aspector.MethodInterceptor
}

func (self *GreeterWrap) AddMethodInterceptor(methodInterceptor aspector.MethodInterceptor) *GreeterWrap {
	self.methodInterceptors = append(self.methodInterceptors, methodInterceptor)
	return self
}

func (self *GreeterWrap) ShareMethodInterceptors(other *GreeterWrap) {
	other.methodInterceptors = self.methodInterceptors
}

func (self *GreeterWrap) CopyMethodInterceptors(other *GreeterWrap) {
	other.methodInterceptors = make([]aspector.MethodInterceptor, 0, len(self.methodInterceptors))
	copy(other.methodInterceptors, self.methodInterceptors)
}

func (self *GreeterWrap) GetName() string {
	return "Greeter"
}

func (self *GreeterWrap) GetMethodName(methodID int) string {
	return [...]string{
		Greeter_Hello: "Hello",
	}[methodID]
}

const Greeter_Hello = 0

type Greeter_HelloArgs struct {
	V1 string
}

type Greeter_HelloResults struct {
	V1 bool
}

func (self *GreeterWrap) Hello(arg1 string) bool {
	if self.methodInterceptors == nil {
		return self.Origin.Hello(arg1)
	}

	args := Greeter_HelloArgs{arg1}
	var methodHandler aspector.MethodHandler
	nextMethodInterceptorIndex := 1

	methodHandler = func(rawArgs interface{}) interface{} {
		if nextMethodInterceptorIndex == len(self.methodInterceptors) {
			args := rawArgs.(*Greeter_HelloArgs)
			result1 := self.Origin.Hello(args.V1)
			results := Greeter_HelloResults{result1}
			return &results
		}

		methodInterceptor := self.methodInterceptors[nextMethodInterceptorIndex]
		nextMethodInterceptorIndex++
		return methodInterceptor(self, Greeter_Hello, rawArgs, methodHandler)
	}

	results := self.methodInterceptors[0](self, Greeter_Hello, &args, methodHandler).(*Greeter_HelloResults)
	return results.V1
}

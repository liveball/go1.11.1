
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "math/big"


	_xtest "math/big_test"


)

var tests = []testing.InternalTest{

	{"TestFunWW", _test.TestFunWW},

	{"TestFunVV", _test.TestFunVV},

	{"TestFunVW", _test.TestFunVW},

	{"TestFunVWW", _test.TestFunVWW},

	{"TestMulWW", _test.TestMulWW},

	{"TestMulAddWWW", _test.TestMulAddWWW},

	{"TestMulBits", _test.TestMulBits},

	{"TestNormBits", _test.TestNormBits},

	{"TestFromBits", _test.TestFromBits},

	{"TestCalibrate", _test.TestCalibrate},

	{"TestDecimalString", _test.TestDecimalString},

	{"TestDecimalInit", _test.TestDecimalInit},

	{"TestDecimalRounding", _test.TestDecimalRounding},

	{"TestFloatZeroValue", _test.TestFloatZeroValue},

	{"TestFloatSetPrec", _test.TestFloatSetPrec},

	{"TestFloatMinPrec", _test.TestFloatMinPrec},

	{"TestFloatSign", _test.TestFloatSign},

	{"TestFloatMantExp", _test.TestFloatMantExp},

	{"TestFloatMantExpAliasing", _test.TestFloatMantExpAliasing},

	{"TestFloatSetMantExp", _test.TestFloatSetMantExp},

	{"TestFloatPredicates", _test.TestFloatPredicates},

	{"TestFloatIsInt", _test.TestFloatIsInt},

	{"TestFloatRound", _test.TestFloatRound},

	{"TestFloatRound24", _test.TestFloatRound24},

	{"TestFloatSetUint64", _test.TestFloatSetUint64},

	{"TestFloatSetInt64", _test.TestFloatSetInt64},

	{"TestFloatSetFloat64", _test.TestFloatSetFloat64},

	{"TestFloatSetInt", _test.TestFloatSetInt},

	{"TestFloatSetRat", _test.TestFloatSetRat},

	{"TestFloatSetInf", _test.TestFloatSetInf},

	{"TestFloatUint64", _test.TestFloatUint64},

	{"TestFloatInt64", _test.TestFloatInt64},

	{"TestFloatFloat32", _test.TestFloatFloat32},

	{"TestFloatFloat64", _test.TestFloatFloat64},

	{"TestFloatInt", _test.TestFloatInt},

	{"TestFloatRat", _test.TestFloatRat},

	{"TestFloatAbs", _test.TestFloatAbs},

	{"TestFloatNeg", _test.TestFloatNeg},

	{"TestFloatInc", _test.TestFloatInc},

	{"TestFloatAdd", _test.TestFloatAdd},

	{"TestFloatAddRoundZero", _test.TestFloatAddRoundZero},

	{"TestFloatAdd32", _test.TestFloatAdd32},

	{"TestFloatAdd64", _test.TestFloatAdd64},

	{"TestIssue20490", _test.TestIssue20490},

	{"TestFloatMul", _test.TestFloatMul},

	{"TestFloatMul64", _test.TestFloatMul64},

	{"TestIssue6866", _test.TestIssue6866},

	{"TestFloatQuo", _test.TestFloatQuo},

	{"TestFloatQuoSmoke", _test.TestFloatQuoSmoke},

	{"TestFloatArithmeticSpecialValues", _test.TestFloatArithmeticSpecialValues},

	{"TestFloatArithmeticOverflow", _test.TestFloatArithmeticOverflow},

	{"TestFloatArithmeticRounding", _test.TestFloatArithmeticRounding},

	{"TestFloatCmpSpecialValues", _test.TestFloatCmpSpecialValues},

	{"TestFloatSetFloat64String", _test.TestFloatSetFloat64String},

	{"TestFloat64Text", _test.TestFloat64Text},

	{"TestFloatText", _test.TestFloatText},

	{"TestFloatFormat", _test.TestFloatFormat},

	{"TestFloatScan", _test.TestFloatScan},

	{"TestFloatGobEncoding", _test.TestFloatGobEncoding},

	{"TestFloatCorruptGob", _test.TestFloatCorruptGob},

	{"TestFloatJSONEncoding", _test.TestFloatJSONEncoding},

	{"TestHilbert", _test.TestHilbert},

	{"TestSignZ", _test.TestSignZ},

	{"TestSetZ", _test.TestSetZ},

	{"TestAbsZ", _test.TestAbsZ},

	{"TestSumZZ", _test.TestSumZZ},

	{"TestProdZZ", _test.TestProdZZ},

	{"TestMul", _test.TestMul},

	{"TestMulRangeZ", _test.TestMulRangeZ},

	{"TestBinomial", _test.TestBinomial},

	{"TestDivisionSigns", _test.TestDivisionSigns},

	{"TestBits", _test.TestBits},

	{"TestSetBytes", _test.TestSetBytes},

	{"TestBytes", _test.TestBytes},

	{"TestQuo", _test.TestQuo},

	{"TestQuoStepD6", _test.TestQuoStepD6},

	{"TestBitLen", _test.TestBitLen},

	{"TestExp", _test.TestExp},

	{"TestGcd", _test.TestGcd},

	{"TestRsh", _test.TestRsh},

	{"TestRshSelf", _test.TestRshSelf},

	{"TestLsh", _test.TestLsh},

	{"TestLshSelf", _test.TestLshSelf},

	{"TestLshRsh", _test.TestLshRsh},

	{"TestCmpAbs", _test.TestCmpAbs},

	{"TestInt64", _test.TestInt64},

	{"TestUint64", _test.TestUint64},

	{"TestBitSet", _test.TestBitSet},

	{"TestBitwise", _test.TestBitwise},

	{"TestNot", _test.TestNot},

	{"TestModInverse", _test.TestModInverse},

	{"TestModSqrt", _test.TestModSqrt},

	{"TestJacobi", _test.TestJacobi},

	{"TestJacobiPanic", _test.TestJacobiPanic},

	{"TestIssue2607", _test.TestIssue2607},

	{"TestSqrt", _test.TestSqrt},

	{"TestIssue22830", _test.TestIssue22830},

	{"TestIntText", _test.TestIntText},

	{"TestAppendText", _test.TestAppendText},

	{"TestGetString", _test.TestGetString},

	{"TestSetString", _test.TestSetString},

	{"TestFormat", _test.TestFormat},

	{"TestScan", _test.TestScan},

	{"TestIntGobEncoding", _test.TestIntGobEncoding},

	{"TestGobEncodingNilIntInSlice", _test.TestGobEncodingNilIntInSlice},

	{"TestIntJSONEncoding", _test.TestIntJSONEncoding},

	{"TestIntXMLEncoding", _test.TestIntXMLEncoding},

	{"TestCmp", _test.TestCmp},

	{"TestSet", _test.TestSet},

	{"TestFunNN", _test.TestFunNN},

	{"TestMulRangeN", _test.TestMulRangeN},

	{"TestMulUnbalanced", _test.TestMulUnbalanced},

	{"TestNLZ", _test.TestNLZ},

	{"TestShiftLeft", _test.TestShiftLeft},

	{"TestShiftRight", _test.TestShiftRight},

	{"TestModW", _test.TestModW},

	{"TestMontgomery", _test.TestMontgomery},

	{"TestExpNN", _test.TestExpNN},

	{"TestFibo", _test.TestFibo},

	{"TestBit", _test.TestBit},

	{"TestSticky", _test.TestSticky},

	{"TestSqr", _test.TestSqr},

	{"TestMaxBase", _test.TestMaxBase},

	{"TestString", _test.TestString},

	{"TestScanBase", _test.TestScanBase},

	{"TestScanPi", _test.TestScanPi},

	{"TestScanPiParallel", _test.TestScanPiParallel},

	{"TestStringPowers", _test.TestStringPowers},

	{"TestProbablyPrime", _test.TestProbablyPrime},

	{"TestMillerRabinPseudoprimes", _test.TestMillerRabinPseudoprimes},

	{"TestLucasPseudoprimes", _test.TestLucasPseudoprimes},

	{"TestZeroRat", _test.TestZeroRat},

	{"TestRatSign", _test.TestRatSign},

	{"TestRatCmp", _test.TestRatCmp},

	{"TestIsInt", _test.TestIsInt},

	{"TestRatAbs", _test.TestRatAbs},

	{"TestRatNeg", _test.TestRatNeg},

	{"TestRatInv", _test.TestRatInv},

	{"TestRatBin", _test.TestRatBin},

	{"TestIssue820", _test.TestIssue820},

	{"TestRatSetFrac64Rat", _test.TestRatSetFrac64Rat},

	{"TestIssue2379", _test.TestIssue2379},

	{"TestIssue3521", _test.TestIssue3521},

	{"TestFloat32Distribution", _test.TestFloat32Distribution},

	{"TestFloat64Distribution", _test.TestFloat64Distribution},

	{"TestSetFloat64NonFinite", _test.TestSetFloat64NonFinite},

	{"TestIsFinite", _test.TestIsFinite},

	{"TestRatSetString", _test.TestRatSetString},

	{"TestRatScan", _test.TestRatScan},

	{"TestFloatString", _test.TestFloatString},

	{"TestFloat32SpecialCases", _test.TestFloat32SpecialCases},

	{"TestFloat64SpecialCases", _test.TestFloat64SpecialCases},

	{"TestRatGobEncoding", _test.TestRatGobEncoding},

	{"TestGobEncodingNilRatInSlice", _test.TestGobEncodingNilRatInSlice},

	{"TestRatJSONEncoding", _test.TestRatJSONEncoding},

	{"TestRatXMLEncoding", _test.TestRatXMLEncoding},

	{"TestFloatSqrt64", _test.TestFloatSqrt64},

	{"TestFloatSqrt", _test.TestFloatSqrt},

	{"TestFloatSqrtSpecial", _test.TestFloatSqrtSpecial},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkAddVV", _test.BenchmarkAddVV},

	{"BenchmarkSubVV", _test.BenchmarkSubVV},

	{"BenchmarkAddVW", _test.BenchmarkAddVW},

	{"BenchmarkSubVW", _test.BenchmarkSubVW},

	{"BenchmarkAddMulVVW", _test.BenchmarkAddMulVVW},

	{"BenchmarkDecimalConversion", _test.BenchmarkDecimalConversion},

	{"BenchmarkFloatString", _test.BenchmarkFloatString},

	{"BenchmarkFloatAdd", _test.BenchmarkFloatAdd},

	{"BenchmarkFloatSub", _test.BenchmarkFloatSub},

	{"BenchmarkParseFloatSmallExp", _test.BenchmarkParseFloatSmallExp},

	{"BenchmarkParseFloatLargeExp", _test.BenchmarkParseFloatLargeExp},

	{"BenchmarkGCD10x10", _test.BenchmarkGCD10x10},

	{"BenchmarkGCD10x100", _test.BenchmarkGCD10x100},

	{"BenchmarkGCD10x1000", _test.BenchmarkGCD10x1000},

	{"BenchmarkGCD10x10000", _test.BenchmarkGCD10x10000},

	{"BenchmarkGCD10x100000", _test.BenchmarkGCD10x100000},

	{"BenchmarkGCD100x100", _test.BenchmarkGCD100x100},

	{"BenchmarkGCD100x1000", _test.BenchmarkGCD100x1000},

	{"BenchmarkGCD100x10000", _test.BenchmarkGCD100x10000},

	{"BenchmarkGCD100x100000", _test.BenchmarkGCD100x100000},

	{"BenchmarkGCD1000x1000", _test.BenchmarkGCD1000x1000},

	{"BenchmarkGCD1000x10000", _test.BenchmarkGCD1000x10000},

	{"BenchmarkGCD1000x100000", _test.BenchmarkGCD1000x100000},

	{"BenchmarkGCD10000x10000", _test.BenchmarkGCD10000x10000},

	{"BenchmarkGCD10000x100000", _test.BenchmarkGCD10000x100000},

	{"BenchmarkGCD100000x100000", _test.BenchmarkGCD100000x100000},

	{"BenchmarkHilbert", _test.BenchmarkHilbert},

	{"BenchmarkBinomial", _test.BenchmarkBinomial},

	{"BenchmarkQuoRem", _test.BenchmarkQuoRem},

	{"BenchmarkExp", _test.BenchmarkExp},

	{"BenchmarkExp2", _test.BenchmarkExp2},

	{"BenchmarkBitset", _test.BenchmarkBitset},

	{"BenchmarkBitsetNeg", _test.BenchmarkBitsetNeg},

	{"BenchmarkBitsetOrig", _test.BenchmarkBitsetOrig},

	{"BenchmarkBitsetNegOrig", _test.BenchmarkBitsetNegOrig},

	{"BenchmarkModSqrt225_Tonelli", _test.BenchmarkModSqrt225_Tonelli},

	{"BenchmarkModSqrt225_3Mod4", _test.BenchmarkModSqrt225_3Mod4},

	{"BenchmarkModSqrt231_Tonelli", _test.BenchmarkModSqrt231_Tonelli},

	{"BenchmarkModSqrt231_5Mod8", _test.BenchmarkModSqrt231_5Mod8},

	{"BenchmarkModInverse", _test.BenchmarkModInverse},

	{"BenchmarkSqrt", _test.BenchmarkSqrt},

	{"BenchmarkIntSqr", _test.BenchmarkIntSqr},

	{"BenchmarkMul", _test.BenchmarkMul},

	{"BenchmarkZeroShifts", _test.BenchmarkZeroShifts},

	{"BenchmarkExp3Power", _test.BenchmarkExp3Power},

	{"BenchmarkFibo", _test.BenchmarkFibo},

	{"BenchmarkNatSqr", _test.BenchmarkNatSqr},

	{"BenchmarkNatSetBytes", _test.BenchmarkNatSetBytes},

	{"BenchmarkScanPi", _test.BenchmarkScanPi},

	{"BenchmarkStringPiParallel", _test.BenchmarkStringPiParallel},

	{"BenchmarkScan", _test.BenchmarkScan},

	{"BenchmarkString", _test.BenchmarkString},

	{"BenchmarkLeafSize", _test.BenchmarkLeafSize},

	{"BenchmarkProbablyPrime", _test.BenchmarkProbablyPrime},

	{"BenchmarkFloatSqrt", _test.BenchmarkFloatSqrt},

}

var examples = []testing.InternalExample{

	{"Example_eConvergents", _xtest.Example_eConvergents, "2/1           = 2.00000000\n3/1           = 3.00000000\n8/3           = 2.66666667\n11/4          = 2.75000000\n19/7          = 2.71428571\n87/32         = 2.71875000\n106/39        = 2.71794872\n193/71        = 2.71830986\n1264/465      = 2.71827957\n1457/536      = 2.71828358\n2721/1001     = 2.71828172\n23225/8544    = 2.71828184\n25946/9545    = 2.71828182\n49171/18089   = 2.71828183\n517656/190435 = 2.71828183\n", false},

	{"ExampleRat_SetString", _xtest.ExampleRat_SetString, "3.142\n", false},

	{"ExampleInt_SetString", _xtest.ExampleInt_SetString, "420\n", false},

	{"ExampleRat_Scan", _xtest.ExampleRat_Scan, "3/2\n", false},

	{"ExampleInt_Scan", _xtest.ExampleInt_Scan, "18446744073709551617\n", false},

	{"ExampleFloat_Scan", _xtest.ExampleFloat_Scan, "1.19282e+99\n", false},

	{"Example_fibonacci", _xtest.Example_fibonacci, "1344719667586153181419716641724567886890850696275767987106294472017884974410332069524504824747437757\nfalse\n", false},

	{"Example_sqrt2", _xtest.Example_sqrt2, "sqrt(2) = 1.41421356237309504880168872420969807856967187537695\nerror = 0.000000e+00\n", false},

	{"ExampleFloat_Add", _xtest.ExampleFloat_Add, "x = 1000 (0x.fap+10, prec = 64, acc = Exact)\ny = 2.718281828 (0x.adf85458248cd8p+2, prec = 53, acc = Exact)\nz = 1002.718282 (0x.faadf854p+10, prec = 32, acc = Below)\n", false},

	{"ExampleFloat_shift", _xtest.ExampleFloat_shift, "0.015625\n0.03125\n0.0625\n0.125\n0.25\n0.5\n1\n2\n4\n8\n16\n", false},

	{"ExampleFloat_Cmp", _xtest.ExampleFloat_Cmp, "   x     y  cmp\n---------------\n-Inf  -Inf    0\n-Inf  -1.2   -1\n-Inf    -0   -1\n-Inf     0   -1\n-Inf   1.2   -1\n-Inf  +Inf   -1\n\n-1.2  -Inf    1\n-1.2  -1.2    0\n-1.2    -0   -1\n-1.2     0   -1\n-1.2   1.2   -1\n-1.2  +Inf   -1\n\n  -0  -Inf    1\n  -0  -1.2    1\n  -0    -0    0\n  -0     0    0\n  -0   1.2   -1\n  -0  +Inf   -1\n\n   0  -Inf    1\n   0  -1.2    1\n   0    -0    0\n   0     0    0\n   0   1.2   -1\n   0  +Inf   -1\n\n 1.2  -Inf    1\n 1.2  -1.2    1\n 1.2    -0    1\n 1.2     0    1\n 1.2   1.2    0\n 1.2  +Inf   -1\n\n+Inf  -Inf    1\n+Inf  -1.2    1\n+Inf    -0    1\n+Inf     0    1\n+Inf   1.2    1\n+Inf  +Inf    0\n", false},

	{"ExampleRoundingMode", _xtest.ExampleRoundingMode, "   x  ToNearestEven  ToNearestAway  ToZero  AwayFromZero  ToNegativeInf  ToPositiveInf\n 2.6              3              3       2             3              2              3\n 2.5              2              3       2             3              2              3\n 2.1              2              2       2             3              2              3\n-2.1             -2             -2      -2            -3             -3             -2\n-2.5             -2             -3      -2            -3             -3             -2\n-2.6             -3             -3      -2            -3             -3             -2\n", false},

}

func init() {
	testdeps.ImportPath = "math/big"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


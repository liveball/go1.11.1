// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/fpf/Downloads/go1.11.1/misc/cgo/stdio/file.go:1:1
// skip

// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

/*
A trivial example of wrapping a C library in Go.
For a more complex example and explanation,
see ../gmp/gmp.go.
*/

package stdio; import _cgo_unsafe "unsafe"

/*
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <errno.h>

char* greeting = "hello, world";
*/
import _ "unsafe"
import "unsafe"

type File _Ctype_struct___sFILE

// Test reference to library symbol.
// Stdout and stderr are too special to be a reliable test.
//var  = C.environ

func (f *File) WriteString(s string) {
	p := (_Cfunc_CString)(s)
	func(_cgo0 *_Ctype_char, _cgo1 *_Ctype_struct___sFILE) _Ctype_int {;	_cgoCheckPointer(_cgo1);	return (_Cfunc_fputs)(_cgo0, _cgo1);}(p, (*_Ctype_struct___sFILE)(f))
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(p))
	f.Flush()
}

func (f *File) Flush() {
	func(_cgo0 *_Ctype_struct___sFILE) _Ctype_int {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_fflush)(_cgo0);}((*_Ctype_struct___sFILE)(f))
}

var Greeting = (_Cfunc_GoString)((*_Cvar_greeting))
var Gbytes = func(_cgo0 _cgo_unsafe.Pointer, _cgo1 _Ctype_int) []byte {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_GoBytes)(_cgo0, _cgo1);}(unsafe.Pointer((*_Cvar_greeting)), _Ctype_int(len(Greeting)))

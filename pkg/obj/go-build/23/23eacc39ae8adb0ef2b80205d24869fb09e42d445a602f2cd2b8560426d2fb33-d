
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "bufio"


	_xtest "bufio_test"


)

var tests = []testing.InternalTest{

	{"TestReaderSimple", _xtest.TestReaderSimple},

	{"TestReader", _xtest.TestReader},

	{"TestZeroReader", _xtest.TestZeroReader},

	{"TestReadRune", _xtest.TestReadRune},

	{"TestUnreadRune", _xtest.TestUnreadRune},

	{"TestUnreadByte", _xtest.TestUnreadByte},

	{"TestUnreadByteMultiple", _xtest.TestUnreadByteMultiple},

	{"TestUnreadByteOthers", _xtest.TestUnreadByteOthers},

	{"TestUnreadRuneError", _xtest.TestUnreadRuneError},

	{"TestUnreadRuneAtEOF", _xtest.TestUnreadRuneAtEOF},

	{"TestReadWriteRune", _xtest.TestReadWriteRune},

	{"TestWriter", _xtest.TestWriter},

	{"TestWriteErrors", _xtest.TestWriteErrors},

	{"TestNewReaderSizeIdempotent", _xtest.TestNewReaderSizeIdempotent},

	{"TestNewWriterSizeIdempotent", _xtest.TestNewWriterSizeIdempotent},

	{"TestWriteString", _xtest.TestWriteString},

	{"TestBufferFull", _xtest.TestBufferFull},

	{"TestPeek", _xtest.TestPeek},

	{"TestPeekThenUnreadRune", _xtest.TestPeekThenUnreadRune},

	{"TestReadLine", _xtest.TestReadLine},

	{"TestLineTooLong", _xtest.TestLineTooLong},

	{"TestReadAfterLines", _xtest.TestReadAfterLines},

	{"TestReadEmptyBuffer", _xtest.TestReadEmptyBuffer},

	{"TestLinesAfterRead", _xtest.TestLinesAfterRead},

	{"TestReadLineNonNilLineOrError", _xtest.TestReadLineNonNilLineOrError},

	{"TestReadLineNewlines", _xtest.TestReadLineNewlines},

	{"TestReaderWriteTo", _xtest.TestReaderWriteTo},

	{"TestReaderWriteToErrors", _xtest.TestReaderWriteToErrors},

	{"TestWriterReadFrom", _xtest.TestWriterReadFrom},

	{"TestWriterReadFromErrors", _xtest.TestWriterReadFromErrors},

	{"TestWriterReadFromCounts", _xtest.TestWriterReadFromCounts},

	{"TestNegativeRead", _xtest.TestNegativeRead},

	{"TestReaderClearError", _xtest.TestReaderClearError},

	{"TestWriterReadFromWhileFull", _xtest.TestWriterReadFromWhileFull},

	{"TestWriterReadFromUntilEOF", _xtest.TestWriterReadFromUntilEOF},

	{"TestWriterReadFromErrNoProgress", _xtest.TestWriterReadFromErrNoProgress},

	{"TestReadZero", _xtest.TestReadZero},

	{"TestReaderReset", _xtest.TestReaderReset},

	{"TestWriterReset", _xtest.TestWriterReset},

	{"TestReaderDiscard", _xtest.TestReaderDiscard},

	{"TestReaderSize", _xtest.TestReaderSize},

	{"TestWriterSize", _xtest.TestWriterSize},

	{"TestSpace", _xtest.TestSpace},

	{"TestScanByte", _xtest.TestScanByte},

	{"TestScanRune", _xtest.TestScanRune},

	{"TestScanWords", _xtest.TestScanWords},

	{"TestScanLongLines", _xtest.TestScanLongLines},

	{"TestScanLineTooLong", _xtest.TestScanLineTooLong},

	{"TestScanLineNoNewline", _xtest.TestScanLineNoNewline},

	{"TestScanLineReturnButNoNewline", _xtest.TestScanLineReturnButNoNewline},

	{"TestScanLineEmptyFinalLine", _xtest.TestScanLineEmptyFinalLine},

	{"TestScanLineEmptyFinalLineWithCR", _xtest.TestScanLineEmptyFinalLineWithCR},

	{"TestSplitError", _xtest.TestSplitError},

	{"TestErrAtEOF", _xtest.TestErrAtEOF},

	{"TestNonEOFWithEmptyRead", _xtest.TestNonEOFWithEmptyRead},

	{"TestBadReader", _xtest.TestBadReader},

	{"TestScanWordsExcessiveWhiteSpace", _xtest.TestScanWordsExcessiveWhiteSpace},

	{"TestEmptyTokens", _xtest.TestEmptyTokens},

	{"TestWithNoEmptyTokens", _xtest.TestWithNoEmptyTokens},

	{"TestDontLoopForever", _xtest.TestDontLoopForever},

	{"TestBlankLines", _xtest.TestBlankLines},

	{"TestEmptyLinesOK", _xtest.TestEmptyLinesOK},

	{"TestHugeBuffer", _xtest.TestHugeBuffer},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkReaderCopyOptimal", _xtest.BenchmarkReaderCopyOptimal},

	{"BenchmarkReaderCopyUnoptimal", _xtest.BenchmarkReaderCopyUnoptimal},

	{"BenchmarkReaderCopyNoWriteTo", _xtest.BenchmarkReaderCopyNoWriteTo},

	{"BenchmarkReaderWriteToOptimal", _xtest.BenchmarkReaderWriteToOptimal},

	{"BenchmarkWriterCopyOptimal", _xtest.BenchmarkWriterCopyOptimal},

	{"BenchmarkWriterCopyUnoptimal", _xtest.BenchmarkWriterCopyUnoptimal},

	{"BenchmarkWriterCopyNoReadFrom", _xtest.BenchmarkWriterCopyNoReadFrom},

	{"BenchmarkReaderEmpty", _xtest.BenchmarkReaderEmpty},

	{"BenchmarkWriterEmpty", _xtest.BenchmarkWriterEmpty},

	{"BenchmarkWriterFlush", _xtest.BenchmarkWriterFlush},

}

var examples = []testing.InternalExample{

	{"ExampleWriter", _xtest.ExampleWriter, "Hello, world!\n", false},

	{"ExampleScanner_words", _xtest.ExampleScanner_words, "15\n", false},

	{"ExampleScanner_custom", _xtest.ExampleScanner_custom, "1234\n5678\nInvalid input: strconv.ParseInt: parsing \"1234567901234567890\": value out of range\n", false},

	{"ExampleScanner_emptyFinalToken", _xtest.ExampleScanner_emptyFinalToken, "\"1\" \"2\" \"3\" \"4\" \"\"\n", false},

}

func init() {
	testdeps.ImportPath = "bufio"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


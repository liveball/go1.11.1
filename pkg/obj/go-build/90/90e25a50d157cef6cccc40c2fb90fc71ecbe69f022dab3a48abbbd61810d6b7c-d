// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/fpf/Downloads/go1.11.1/misc/cgo/testcarchive/src/libgo4/libgo4.go:1:1
// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

/*
#include <signal.h>
#include <pthread.h>

// Raise SIGIO.
static void CRaiseSIGIO(pthread_t* p) {
	pthread_kill(*p, SIGIO);
}
*/
import _ "unsafe"

import (
	"os"
	"os/signal"
	"sync/atomic"
	"syscall"
)

var sigioCount int32

// Catch SIGIO.
//export GoCatchSIGIO
func GoCatchSIGIO() {
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGIO)
	go func() {
		for range c {
			atomic.AddInt32(&sigioCount, 1)
		}
	}()
}

// Raise SIGIO.
//export GoRaiseSIGIO
func GoRaiseSIGIO(p *_Ctype_pthread_t) {
	func(_cgo0 *_Ctype_pthread_t) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_CRaiseSIGIO)(_cgo0);}(p)
}

// Return the number of SIGIO signals seen.
//export SIGIOCount
func SIGIOCount() _Ctype_int {
	return _Ctype_int(atomic.LoadInt32(&sigioCount))
}

func main() {
}

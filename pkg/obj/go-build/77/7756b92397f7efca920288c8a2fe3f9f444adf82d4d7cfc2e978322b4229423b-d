
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "os/exec"


	_xtest "os/exec_test"


)

var tests = []testing.InternalTest{

	{"TestDedupEnv", _test.TestDedupEnv},

	{"TestPrefixSuffixSaver", _test.TestPrefixSuffixSaver},

	{"TestLookPathNotFound", _test.TestLookPathNotFound},

	{"TestLookPathUnixEmptyPath", _test.TestLookPathUnixEmptyPath},

	{"TestCredentialNoSetGroups", _xtest.TestCredentialNoSetGroups},

	{"TestWaitid", _xtest.TestWaitid},

	{"TestEcho", _xtest.TestEcho},

	{"TestCommandRelativeName", _xtest.TestCommandRelativeName},

	{"TestCatStdin", _xtest.TestCatStdin},

	{"TestEchoFileRace", _xtest.TestEchoFileRace},

	{"TestCatGoodAndBadFile", _xtest.TestCatGoodAndBadFile},

	{"TestNoExistExecutable", _xtest.TestNoExistExecutable},

	{"TestExitStatus", _xtest.TestExitStatus},

	{"TestPipes", _xtest.TestPipes},

	{"TestStdinClose", _xtest.TestStdinClose},

	{"TestStdinCloseRace", _xtest.TestStdinCloseRace},

	{"TestPipeLookPathLeak", _xtest.TestPipeLookPathLeak},

	{"TestExtraFilesFDShuffle", _xtest.TestExtraFilesFDShuffle},

	{"TestExtraFiles", _xtest.TestExtraFiles},

	{"TestExtraFilesRace", _xtest.TestExtraFilesRace},

	{"TestHelperProcess", _xtest.TestHelperProcess},

	{"TestIgnorePipeErrorOnSuccess", _xtest.TestIgnorePipeErrorOnSuccess},

	{"TestClosePipeOnCopyError", _xtest.TestClosePipeOnCopyError},

	{"TestOutputStderrCapture", _xtest.TestOutputStderrCapture},

	{"TestContext", _xtest.TestContext},

	{"TestContextCancel", _xtest.TestContextCancel},

	{"TestDedupEnvEcho", _xtest.TestDedupEnvEcho},

}

var benchmarks = []testing.InternalBenchmark{

}

var examples = []testing.InternalExample{

}

func init() {
	testdeps.ImportPath = "os/exec"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


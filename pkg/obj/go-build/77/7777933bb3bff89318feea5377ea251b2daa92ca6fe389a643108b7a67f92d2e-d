
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "sync"


	_xtest "sync_test"


)

var tests = []testing.InternalTest{

	{"TestCondSignal", _xtest.TestCondSignal},

	{"TestCondSignalGenerations", _xtest.TestCondSignalGenerations},

	{"TestCondBroadcast", _xtest.TestCondBroadcast},

	{"TestRace", _xtest.TestRace},

	{"TestCondSignalStealing", _xtest.TestCondSignalStealing},

	{"TestCondCopy", _xtest.TestCondCopy},

	{"TestMapMatchesRWMutex", _xtest.TestMapMatchesRWMutex},

	{"TestMapMatchesDeepCopy", _xtest.TestMapMatchesDeepCopy},

	{"TestConcurrentRange", _xtest.TestConcurrentRange},

	{"TestSemaphore", _xtest.TestSemaphore},

	{"TestMutex", _xtest.TestMutex},

	{"TestMutexMisuse", _xtest.TestMutexMisuse},

	{"TestMutexFairness", _xtest.TestMutexFairness},

	{"TestOnce", _xtest.TestOnce},

	{"TestOncePanic", _xtest.TestOncePanic},

	{"TestPool", _xtest.TestPool},

	{"TestPoolNew", _xtest.TestPoolNew},

	{"TestPoolGC", _xtest.TestPoolGC},

	{"TestPoolRelease", _xtest.TestPoolRelease},

	{"TestPoolStress", _xtest.TestPoolStress},

	{"TestParallelReaders", _xtest.TestParallelReaders},

	{"TestRWMutex", _xtest.TestRWMutex},

	{"TestRLocker", _xtest.TestRLocker},

	{"TestWaitGroup", _xtest.TestWaitGroup},

	{"TestWaitGroupMisuse", _xtest.TestWaitGroupMisuse},

	{"TestWaitGroupMisuse2", _xtest.TestWaitGroupMisuse2},

	{"TestWaitGroupMisuse3", _xtest.TestWaitGroupMisuse3},

	{"TestWaitGroupRace", _xtest.TestWaitGroupRace},

	{"TestWaitGroupAlign", _xtest.TestWaitGroupAlign},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkCond1", _xtest.BenchmarkCond1},

	{"BenchmarkCond2", _xtest.BenchmarkCond2},

	{"BenchmarkCond4", _xtest.BenchmarkCond4},

	{"BenchmarkCond8", _xtest.BenchmarkCond8},

	{"BenchmarkCond16", _xtest.BenchmarkCond16},

	{"BenchmarkCond32", _xtest.BenchmarkCond32},

	{"BenchmarkLoadMostlyHits", _xtest.BenchmarkLoadMostlyHits},

	{"BenchmarkLoadMostlyMisses", _xtest.BenchmarkLoadMostlyMisses},

	{"BenchmarkLoadOrStoreBalanced", _xtest.BenchmarkLoadOrStoreBalanced},

	{"BenchmarkLoadOrStoreUnique", _xtest.BenchmarkLoadOrStoreUnique},

	{"BenchmarkLoadOrStoreCollision", _xtest.BenchmarkLoadOrStoreCollision},

	{"BenchmarkRange", _xtest.BenchmarkRange},

	{"BenchmarkAdversarialAlloc", _xtest.BenchmarkAdversarialAlloc},

	{"BenchmarkAdversarialDelete", _xtest.BenchmarkAdversarialDelete},

	{"BenchmarkUncontendedSemaphore", _xtest.BenchmarkUncontendedSemaphore},

	{"BenchmarkContendedSemaphore", _xtest.BenchmarkContendedSemaphore},

	{"BenchmarkMutexUncontended", _xtest.BenchmarkMutexUncontended},

	{"BenchmarkMutex", _xtest.BenchmarkMutex},

	{"BenchmarkMutexSlack", _xtest.BenchmarkMutexSlack},

	{"BenchmarkMutexWork", _xtest.BenchmarkMutexWork},

	{"BenchmarkMutexWorkSlack", _xtest.BenchmarkMutexWorkSlack},

	{"BenchmarkMutexNoSpin", _xtest.BenchmarkMutexNoSpin},

	{"BenchmarkMutexSpin", _xtest.BenchmarkMutexSpin},

	{"BenchmarkOnce", _xtest.BenchmarkOnce},

	{"BenchmarkPool", _xtest.BenchmarkPool},

	{"BenchmarkPoolOverflow", _xtest.BenchmarkPoolOverflow},

	{"BenchmarkSemaUncontended", _xtest.BenchmarkSemaUncontended},

	{"BenchmarkSemaSyntNonblock", _xtest.BenchmarkSemaSyntNonblock},

	{"BenchmarkSemaSyntBlock", _xtest.BenchmarkSemaSyntBlock},

	{"BenchmarkSemaWorkNonblock", _xtest.BenchmarkSemaWorkNonblock},

	{"BenchmarkSemaWorkBlock", _xtest.BenchmarkSemaWorkBlock},

	{"BenchmarkRWMutexUncontended", _xtest.BenchmarkRWMutexUncontended},

	{"BenchmarkRWMutexWrite100", _xtest.BenchmarkRWMutexWrite100},

	{"BenchmarkRWMutexWrite10", _xtest.BenchmarkRWMutexWrite10},

	{"BenchmarkRWMutexWorkWrite100", _xtest.BenchmarkRWMutexWorkWrite100},

	{"BenchmarkRWMutexWorkWrite10", _xtest.BenchmarkRWMutexWorkWrite10},

	{"BenchmarkWaitGroupUncontended", _xtest.BenchmarkWaitGroupUncontended},

	{"BenchmarkWaitGroupAddDone", _xtest.BenchmarkWaitGroupAddDone},

	{"BenchmarkWaitGroupAddDoneWork", _xtest.BenchmarkWaitGroupAddDoneWork},

	{"BenchmarkWaitGroupWait", _xtest.BenchmarkWaitGroupWait},

	{"BenchmarkWaitGroupWaitWork", _xtest.BenchmarkWaitGroupWaitWork},

	{"BenchmarkWaitGroupActuallyWait", _xtest.BenchmarkWaitGroupActuallyWait},

}

var examples = []testing.InternalExample{

	{"ExamplePool", _xtest.ExamplePool, "2006-01-02T15:04:05Z path=/search?q=flowers\n", false},

	{"ExampleOnce", _xtest.ExampleOnce, "Only once\n", false},

}

func init() {
	testdeps.ImportPath = "sync"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


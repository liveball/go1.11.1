
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "unicode"


	_xtest "unicode_test"


)

var tests = []testing.InternalTest{

	{"TestDigit", _xtest.TestDigit},

	{"TestDigitOptimization", _xtest.TestDigitOptimization},

	{"TestIsControlLatin1", _xtest.TestIsControlLatin1},

	{"TestIsLetterLatin1", _xtest.TestIsLetterLatin1},

	{"TestIsUpperLatin1", _xtest.TestIsUpperLatin1},

	{"TestIsLowerLatin1", _xtest.TestIsLowerLatin1},

	{"TestNumberLatin1", _xtest.TestNumberLatin1},

	{"TestIsPrintLatin1", _xtest.TestIsPrintLatin1},

	{"TestIsGraphicLatin1", _xtest.TestIsGraphicLatin1},

	{"TestIsPunctLatin1", _xtest.TestIsPunctLatin1},

	{"TestIsSpaceLatin1", _xtest.TestIsSpaceLatin1},

	{"TestIsSymbolLatin1", _xtest.TestIsSymbolLatin1},

	{"TestIsLetter", _xtest.TestIsLetter},

	{"TestIsUpper", _xtest.TestIsUpper},

	{"TestTo", _xtest.TestTo},

	{"TestToUpperCase", _xtest.TestToUpperCase},

	{"TestToLowerCase", _xtest.TestToLowerCase},

	{"TestToTitleCase", _xtest.TestToTitleCase},

	{"TestIsSpace", _xtest.TestIsSpace},

	{"TestLetterOptimizations", _xtest.TestLetterOptimizations},

	{"TestTurkishCase", _xtest.TestTurkishCase},

	{"TestSimpleFold", _xtest.TestSimpleFold},

	{"TestCalibrate", _xtest.TestCalibrate},

	{"TestLatinOffset", _xtest.TestLatinOffset},

	{"TestSpecialCaseNoMapping", _xtest.TestSpecialCaseNoMapping},

	{"TestScripts", _xtest.TestScripts},

	{"TestCategories", _xtest.TestCategories},

	{"TestProperties", _xtest.TestProperties},

}

var benchmarks = []testing.InternalBenchmark{

}

var examples = []testing.InternalExample{

	{"Example_is", _xtest.Example_is, "For '\\b':\n\tis control rune\n\tis not printable rune\nFor '5':\n\tis digit rune\n\tis graphic rune\n\tis number rune\n\tis printable rune\nFor 'Ὂ':\n\tis graphic rune\n\tis letter rune\n\tis printable rune\n\tis upper case rune\nFor 'g':\n\tis graphic rune\n\tis letter rune\n\tis lower case rune\n\tis printable rune\nFor '̀':\n\tis graphic rune\n\tis mark rune\n\tis printable rune\nFor '9':\n\tis digit rune\n\tis graphic rune\n\tis number rune\n\tis printable rune\nFor '!':\n\tis graphic rune\n\tis printable rune\n\tis punct rune\nFor ' ':\n\tis graphic rune\n\tis printable rune\n\tis space rune\nFor '℃':\n\tis graphic rune\n\tis printable rune\n\tis symbol rune\nFor 'ᾭ':\n\tis graphic rune\n\tis letter rune\n\tis printable rune\n\tis title case rune\nFor 'G':\n\tis graphic rune\n\tis letter rune\n\tis printable rune\n\tis upper case rune\n", false},

	{"ExampleSimpleFold", _xtest.ExampleSimpleFold, "U+0061 'a'\nU+0041 'A'\nU+006B 'k'\nU+212A 'K'\nU+004B 'K'\nU+0031 '1'\n", false},

	{"ExampleTo", _xtest.ExampleTo, "U+0047 'G'\nU+0067 'g'\nU+0047 'G'\nU+0047 'G'\nU+0067 'g'\nU+0047 'G'\n", false},

	{"ExampleToLower", _xtest.ExampleToLower, "U+0067 'g'\n", false},

	{"ExampleToTitle", _xtest.ExampleToTitle, "U+0047 'G'\n", false},

	{"ExampleToUpper", _xtest.ExampleToUpper, "U+0047 'G'\n", false},

	{"ExampleSpecialCase", _xtest.ExampleSpecialCase, "U+0069 'i'\nU+0130 'İ'\nU+0130 'İ'\nU+0069 'i'\nU+0130 'İ'\nU+0130 'İ'\n", false},

}

func init() {
	testdeps.ImportPath = "unicode"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


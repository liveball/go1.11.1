
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "crypto/tls"


	_xtest "crypto/tls_test"


)

var tests = []testing.InternalTest{

	{"TestSignatureSelection", _test.TestSignatureSelection},

	{"TestRoundUp", _test.TestRoundUp},

	{"TestRemovePadding", _test.TestRemovePadding},

	{"TestCertificateSelection", _test.TestCertificateSelection},

	{"TestDynamicRecordSizingWithStreamCipher", _test.TestDynamicRecordSizingWithStreamCipher},

	{"TestDynamicRecordSizingWithCBC", _test.TestDynamicRecordSizingWithCBC},

	{"TestDynamicRecordSizingWithAEAD", _test.TestDynamicRecordSizingWithAEAD},

	{"TestHairpinInClose", _test.TestHairpinInClose},

	{"TestHandshakeClientRSARC4", _test.TestHandshakeClientRSARC4},

	{"TestHandshakeClientRSAAES128GCM", _test.TestHandshakeClientRSAAES128GCM},

	{"TestHandshakeClientRSAAES256GCM", _test.TestHandshakeClientRSAAES256GCM},

	{"TestHandshakeClientECDHERSAAES", _test.TestHandshakeClientECDHERSAAES},

	{"TestHandshakeClientECDHEECDSAAES", _test.TestHandshakeClientECDHEECDSAAES},

	{"TestHandshakeClientECDHEECDSAAESGCM", _test.TestHandshakeClientECDHEECDSAAESGCM},

	{"TestHandshakeClientAES256GCMSHA384", _test.TestHandshakeClientAES256GCMSHA384},

	{"TestHandshakeClientAES128CBCSHA256", _test.TestHandshakeClientAES128CBCSHA256},

	{"TestHandshakeClientECDHERSAAES128CBCSHA256", _test.TestHandshakeClientECDHERSAAES128CBCSHA256},

	{"TestHandshakeClientECDHEECDSAAES128CBCSHA256", _test.TestHandshakeClientECDHEECDSAAES128CBCSHA256},

	{"TestHandshakeClientX25519", _test.TestHandshakeClientX25519},

	{"TestHandshakeClientECDHERSAChaCha20", _test.TestHandshakeClientECDHERSAChaCha20},

	{"TestHandshakeClientECDHEECDSAChaCha20", _test.TestHandshakeClientECDHEECDSAChaCha20},

	{"TestHandshakeClientCertRSA", _test.TestHandshakeClientCertRSA},

	{"TestHandshakeClientCertECDSA", _test.TestHandshakeClientCertECDSA},

	{"TestClientResumption", _test.TestClientResumption},

	{"TestLRUClientSessionCache", _test.TestLRUClientSessionCache},

	{"TestKeyLog", _test.TestKeyLog},

	{"TestHandshakeClientALPNMatch", _test.TestHandshakeClientALPNMatch},

	{"TestHandshakClientSCTs", _test.TestHandshakClientSCTs},

	{"TestRenegotiationRejected", _test.TestRenegotiationRejected},

	{"TestRenegotiateOnce", _test.TestRenegotiateOnce},

	{"TestRenegotiateTwice", _test.TestRenegotiateTwice},

	{"TestRenegotiateTwiceRejected", _test.TestRenegotiateTwiceRejected},

	{"TestHandshakeClientExportKeyingMaterial", _test.TestHandshakeClientExportKeyingMaterial},

	{"TestHostnameInSNI", _test.TestHostnameInSNI},

	{"TestServerSelectingUnconfiguredCipherSuite", _test.TestServerSelectingUnconfiguredCipherSuite},

	{"TestVerifyPeerCertificate", _test.TestVerifyPeerCertificate},

	{"TestFailedWrite", _test.TestFailedWrite},

	{"TestBuffering", _test.TestBuffering},

	{"TestAlertFlushing", _test.TestAlertFlushing},

	{"TestHandshakeRace", _test.TestHandshakeRace},

	{"TestTLS11SignatureSchemes", _test.TestTLS11SignatureSchemes},

	{"TestGetClientCertificate", _test.TestGetClientCertificate},

	{"TestRSAPSSKeyError", _test.TestRSAPSSKeyError},

	{"TestCloseClientConnectionOnIdleServer", _test.TestCloseClientConnectionOnIdleServer},

	{"TestMarshalUnmarshal", _test.TestMarshalUnmarshal},

	{"TestFuzz", _test.TestFuzz},

	{"TestRejectEmptySCTList", _test.TestRejectEmptySCTList},

	{"TestRejectEmptySCT", _test.TestRejectEmptySCT},

	{"TestSimpleError", _test.TestSimpleError},

	{"TestRejectBadProtocolVersion", _test.TestRejectBadProtocolVersion},

	{"TestNoSuiteOverlap", _test.TestNoSuiteOverlap},

	{"TestNoCompressionOverlap", _test.TestNoCompressionOverlap},

	{"TestNoRC4ByDefault", _test.TestNoRC4ByDefault},

	{"TestRejectSNIWithTrailingDot", _test.TestRejectSNIWithTrailingDot},

	{"TestDontSelectECDSAWithRSAKey", _test.TestDontSelectECDSAWithRSAKey},

	{"TestDontSelectRSAWithECDSAKey", _test.TestDontSelectRSAWithECDSAKey},

	{"TestRenegotiationExtension", _test.TestRenegotiationExtension},

	{"TestTLS12OnlyCipherSuites", _test.TestTLS12OnlyCipherSuites},

	{"TestAlertForwarding", _test.TestAlertForwarding},

	{"TestClose", _test.TestClose},

	{"TestVersion", _test.TestVersion},

	{"TestCipherSuitePreference", _test.TestCipherSuitePreference},

	{"TestSCTHandshake", _test.TestSCTHandshake},

	{"TestCrossVersionResume", _test.TestCrossVersionResume},

	{"TestHandshakeServerRSARC4", _test.TestHandshakeServerRSARC4},

	{"TestHandshakeServerRSA3DES", _test.TestHandshakeServerRSA3DES},

	{"TestHandshakeServerRSAAES", _test.TestHandshakeServerRSAAES},

	{"TestHandshakeServerAESGCM", _test.TestHandshakeServerAESGCM},

	{"TestHandshakeServerAES256GCMSHA384", _test.TestHandshakeServerAES256GCMSHA384},

	{"TestHandshakeServerECDHEECDSAAES", _test.TestHandshakeServerECDHEECDSAAES},

	{"TestHandshakeServerX25519", _test.TestHandshakeServerX25519},

	{"TestHandshakeServerALPN", _test.TestHandshakeServerALPN},

	{"TestHandshakeServerALPNNoMatch", _test.TestHandshakeServerALPNNoMatch},

	{"TestHandshakeServerSNI", _test.TestHandshakeServerSNI},

	{"TestHandshakeServerSNIGetCertificate", _test.TestHandshakeServerSNIGetCertificate},

	{"TestHandshakeServerSNIGetCertificateNotFound", _test.TestHandshakeServerSNIGetCertificateNotFound},

	{"TestHandshakeServerSNIGetCertificateError", _test.TestHandshakeServerSNIGetCertificateError},

	{"TestHandshakeServerEmptyCertificates", _test.TestHandshakeServerEmptyCertificates},

	{"TestCipherSuiteCertPreferenceECDSA", _test.TestCipherSuiteCertPreferenceECDSA},

	{"TestResumption", _test.TestResumption},

	{"TestResumptionDisabled", _test.TestResumptionDisabled},

	{"TestFallbackSCSV", _test.TestFallbackSCSV},

	{"TestHandshakeServerExportKeyingMaterial", _test.TestHandshakeServerExportKeyingMaterial},

	{"TestClientAuth", _test.TestClientAuth},

	{"TestSNIGivenOnFailure", _test.TestSNIGivenOnFailure},

	{"TestGetConfigForClient", _test.TestGetConfigForClient},

	{"TestCloseServerConnectionOnIdleClient", _test.TestCloseServerConnectionOnIdleClient},

	{"TestSplitPreMasterSecret", _test.TestSplitPreMasterSecret},

	{"TestKeysFromPreMasterSecret", _test.TestKeysFromPreMasterSecret},

	{"TestX509KeyPair", _test.TestX509KeyPair},

	{"TestX509KeyPairErrors", _test.TestX509KeyPairErrors},

	{"TestX509MixedKeyPair", _test.TestX509MixedKeyPair},

	{"TestDialTimeout", _test.TestDialTimeout},

	{"TestConnReadNonzeroAndEOF", _test.TestConnReadNonzeroAndEOF},

	{"TestTLSUniqueMatches", _test.TestTLSUniqueMatches},

	{"TestVerifyHostname", _test.TestVerifyHostname},

	{"TestVerifyHostnameResumed", _test.TestVerifyHostnameResumed},

	{"TestConnCloseBreakingWrite", _test.TestConnCloseBreakingWrite},

	{"TestConnCloseWrite", _test.TestConnCloseWrite},

	{"TestWarningAlertFlood", _test.TestWarningAlertFlood},

	{"TestCloneFuncFields", _test.TestCloneFuncFields},

	{"TestCloneNonFuncFields", _test.TestCloneNonFuncFields},

	{"TestConnectionStateMarshal", _test.TestConnectionStateMarshal},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkHandshakeServer", _test.BenchmarkHandshakeServer},

	{"BenchmarkThroughput", _test.BenchmarkThroughput},

	{"BenchmarkLatency", _test.BenchmarkLatency},

}

var examples = []testing.InternalExample{

	{"ExampleConfig_keyLogWriter", _xtest.ExampleConfig_keyLogWriter, "CLIENT_RANDOM 0000000000000000000000000000000000000000000000000000000000000000 baca0df460a688e44ce018b025183cc2353ae01f89755ef766eedd3ecc302888ee3b3a22962e45f48c20df15a98c0e80\n", false},

}

func init() {
	testdeps.ImportPath = "crypto/tls"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


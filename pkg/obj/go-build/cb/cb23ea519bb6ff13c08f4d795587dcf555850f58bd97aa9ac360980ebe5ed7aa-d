//go:cgo_ldflag "-g"
//go:cgo_ldflag "-O2"
// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_FILE = _Ctype_struct___sFILE

type _Ctype___darwin_off_t = _Ctype___int64_t

type _Ctype___int64_t = _Ctype_longlong

type _Ctype_char int8

type _Ctype_fpos_t = _Ctype___darwin_off_t

type _Ctype_int int32

type _Ctype_longlong int64

type _Ctype_short int16

type _Ctype_struct___sFILE struct {
	_p		*_Ctype_uchar
	_r		_Ctype_int
	_w		_Ctype_int
	_flags		_Ctype_short
	_file		_Ctype_short
	_		[4]byte
	_bf		_Ctype_struct___sbuf
	_lbfsize	_Ctype_int
	_		[4]byte
	_cookie		unsafe.Pointer
	_close		*[0]byte
	_read		*[0]byte
	_seek		*[0]byte
	_write		*[0]byte
	_ub		_Ctype_struct___sbuf
	_extra		*_Ctype_struct___sFILEX
	_ur		_Ctype_int
	_ubuf		[3]_Ctype_uchar
	_nbuf		[1]_Ctype_uchar
	_lb		_Ctype_struct___sbuf
	_blksize	_Ctype_int
	_		[4]byte
	_offset		_Ctype_fpos_t
}

type _Ctype_struct___sFILEX struct{}

type _Ctype_struct___sbuf struct {
	_base	*_Ctype_uchar
	_size	_Ctype_int
	_	[4]byte
}

type _Ctype_uchar uint8

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgo_runtime_cgocallback runtime.cgocallback
func _cgo_runtime_cgocallback(unsafe.Pointer, unsafe.Pointer, uintptr, uintptr)

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, ...interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_8f7635a8b1a2_Cfunc_fopen
//go:linkname __cgofn__cgo_8f7635a8b1a2_Cfunc_fopen _cgo_8f7635a8b1a2_Cfunc_fopen
var __cgofn__cgo_8f7635a8b1a2_Cfunc_fopen byte
var _cgo_8f7635a8b1a2_Cfunc_fopen = unsafe.Pointer(&__cgofn__cgo_8f7635a8b1a2_Cfunc_fopen)

//go:cgo_unsafe_args
func _Cfunc_fopen(p0 *_Ctype_char, p1 *_Ctype_char) (r1 *_Ctype_struct___sFILE) {
	_cgo_runtime_cgocall(_cgo_8f7635a8b1a2_Cfunc_fopen, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}


package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "os"


	_xtest "os_test"


)

var tests = []testing.InternalTest{

	{"TestExpand", _xtest.TestExpand},

	{"TestConsistentEnviron", _xtest.TestConsistentEnviron},

	{"TestUnsetenv", _xtest.TestUnsetenv},

	{"TestClearenv", _xtest.TestClearenv},

	{"TestLookupEnv", _xtest.TestLookupEnv},

	{"TestSetenvUnixEinval", _xtest.TestSetenvUnixEinval},

	{"TestExpandEnvShellSpecialVar", _xtest.TestExpandEnvShellSpecialVar},

	{"TestErrIsExist", _xtest.TestErrIsExist},

	{"TestErrIsNotExist", _xtest.TestErrIsNotExist},

	{"TestIsExist", _xtest.TestIsExist},

	{"TestIsPermission", _xtest.TestIsPermission},

	{"TestErrPathNUL", _xtest.TestErrPathNUL},

	{"TestExecutable", _xtest.TestExecutable},

	{"TestFifoEOF", _xtest.TestFifoEOF},

	{"TestStat", _xtest.TestStat},

	{"TestStatError", _xtest.TestStatError},

	{"TestFstat", _xtest.TestFstat},

	{"TestLstat", _xtest.TestLstat},

	{"TestRead0", _xtest.TestRead0},

	{"TestReadClosed", _xtest.TestReadClosed},

	{"TestReaddirnames", _xtest.TestReaddirnames},

	{"TestReaddir", _xtest.TestReaddir},

	{"TestReaddirnamesOneAtATime", _xtest.TestReaddirnamesOneAtATime},

	{"TestReaddirNValues", _xtest.TestReaddirNValues},

	{"TestReaddirStatFailures", _xtest.TestReaddirStatFailures},

	{"TestReaddirOfFile", _xtest.TestReaddirOfFile},

	{"TestHardLink", _xtest.TestHardLink},

	{"TestSymlink", _xtest.TestSymlink},

	{"TestLongSymlink", _xtest.TestLongSymlink},

	{"TestRename", _xtest.TestRename},

	{"TestRenameOverwriteDest", _xtest.TestRenameOverwriteDest},

	{"TestRenameFailed", _xtest.TestRenameFailed},

	{"TestRenameNotExisting", _xtest.TestRenameNotExisting},

	{"TestRenameToDirFailed", _xtest.TestRenameToDirFailed},

	{"TestStartProcess", _xtest.TestStartProcess},

	{"TestChmod", _xtest.TestChmod},

	{"TestFTruncate", _xtest.TestFTruncate},

	{"TestTruncate", _xtest.TestTruncate},

	{"TestChtimes", _xtest.TestChtimes},

	{"TestChtimesDir", _xtest.TestChtimesDir},

	{"TestChdirAndGetwd", _xtest.TestChdirAndGetwd},

	{"TestProgWideChdir", _xtest.TestProgWideChdir},

	{"TestSeek", _xtest.TestSeek},

	{"TestSeekError", _xtest.TestSeekError},

	{"TestOpenError", _xtest.TestOpenError},

	{"TestOpenNoName", _xtest.TestOpenNoName},

	{"TestHostname", _xtest.TestHostname},

	{"TestReadAt", _xtest.TestReadAt},

	{"TestReadAtOffset", _xtest.TestReadAtOffset},

	{"TestReadAtNegativeOffset", _xtest.TestReadAtNegativeOffset},

	{"TestWriteAt", _xtest.TestWriteAt},

	{"TestWriteAtNegativeOffset", _xtest.TestWriteAtNegativeOffset},

	{"TestAppend", _xtest.TestAppend},

	{"TestStatDirWithTrailingSlash", _xtest.TestStatDirWithTrailingSlash},

	{"TestNilProcessStateString", _xtest.TestNilProcessStateString},

	{"TestSameFile", _xtest.TestSameFile},

	{"TestDevNullFile", _xtest.TestDevNullFile},

	{"TestLargeWriteToConsole", _xtest.TestLargeWriteToConsole},

	{"TestStatDirModeExec", _xtest.TestStatDirModeExec},

	{"TestStatStdin", _xtest.TestStatStdin},

	{"TestStatRelativeSymlink", _xtest.TestStatRelativeSymlink},

	{"TestReadAtEOF", _xtest.TestReadAtEOF},

	{"TestLongPath", _xtest.TestLongPath},

	{"TestSleep", _xtest.TestSleep},

	{"TestKillStartProcess", _xtest.TestKillStartProcess},

	{"TestGetppid", _xtest.TestGetppid},

	{"TestKillFindProcess", _xtest.TestKillFindProcess},

	{"TestNilFileMethods", _xtest.TestNilFileMethods},

	{"TestRemoveAllRace", _xtest.TestRemoveAllRace},

	{"TestPipeThreads", _xtest.TestPipeThreads},

	{"TestDoubleCloseError", _xtest.TestDoubleCloseError},

	{"TestChown", _xtest.TestChown},

	{"TestFileChown", _xtest.TestFileChown},

	{"TestLchown", _xtest.TestLchown},

	{"TestReaddirRemoveRace", _xtest.TestReaddirRemoveRace},

	{"TestMkdirStickyUmask", _xtest.TestMkdirStickyUmask},

	{"TestNewFileBlock", _xtest.TestNewFileBlock},

	{"TestNewFileNonBlock", _xtest.TestNewFileNonBlock},

	{"TestMkdirAll", _xtest.TestMkdirAll},

	{"TestRemoveAll", _xtest.TestRemoveAll},

	{"TestRemoveAllLarge", _xtest.TestRemoveAllLarge},

	{"TestMkdirAllWithSymlink", _xtest.TestMkdirAllWithSymlink},

	{"TestMkdirAllAtSlash", _xtest.TestMkdirAllAtSlash},

	{"TestEPIPE", _xtest.TestEPIPE},

	{"TestStdPipe", _xtest.TestStdPipe},

	{"TestStdPipeHelper", _xtest.TestStdPipeHelper},

	{"TestClosedPipeRaceRead", _xtest.TestClosedPipeRaceRead},

	{"TestClosedPipeRaceWrite", _xtest.TestClosedPipeRaceWrite},

	{"TestReadNonblockingFd", _xtest.TestReadNonblockingFd},

	{"TestCloseWithBlockingReadByNewFile", _xtest.TestCloseWithBlockingReadByNewFile},

	{"TestCloseWithBlockingReadByFd", _xtest.TestCloseWithBlockingReadByFd},

	{"TestPipeEOF", _xtest.TestPipeEOF},

	{"TestFdRace", _xtest.TestFdRace},

	{"TestFdReadRace", _xtest.TestFdReadRace},

	{"TestNonpollableDeadline", _xtest.TestNonpollableDeadline},

	{"TestReadTimeout", _xtest.TestReadTimeout},

	{"TestReadTimeoutMustNotReturn", _xtest.TestReadTimeoutMustNotReturn},

	{"TestWriteTimeout", _xtest.TestWriteTimeout},

	{"TestWriteTimeoutMustNotReturn", _xtest.TestWriteTimeoutMustNotReturn},

	{"TestReadTimeoutFluctuation", _xtest.TestReadTimeoutFluctuation},

	{"TestWriteTimeoutFluctuation", _xtest.TestWriteTimeoutFluctuation},

	{"TestVariousDeadlines", _xtest.TestVariousDeadlines},

	{"TestVariousDeadlines1Proc", _xtest.TestVariousDeadlines1Proc},

	{"TestVariousDeadlines4Proc", _xtest.TestVariousDeadlines4Proc},

	{"TestReadWriteDeadlineRace", _xtest.TestReadWriteDeadlineRace},

	{"TestRacyRead", _xtest.TestRacyRead},

	{"TestRacyWrite", _xtest.TestRacyWrite},

	{"TestTTYClose", _xtest.TestTTYClose},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkExpand", _xtest.BenchmarkExpand},

	{"BenchmarkReaddirname", _xtest.BenchmarkReaddirname},

	{"BenchmarkReaddir", _xtest.BenchmarkReaddir},

	{"BenchmarkStatDot", _xtest.BenchmarkStatDot},

	{"BenchmarkStatFile", _xtest.BenchmarkStatFile},

	{"BenchmarkStatDir", _xtest.BenchmarkStatDir},

	{"BenchmarkLstatDot", _xtest.BenchmarkLstatDot},

	{"BenchmarkLstatFile", _xtest.BenchmarkLstatFile},

	{"BenchmarkLstatDir", _xtest.BenchmarkLstatDir},

}

var examples = []testing.InternalExample{

	{"ExampleIsNotExist", _xtest.ExampleIsNotExist, "file does not exist\n", false},

	{"ExampleExpand", _xtest.ExampleExpand, "Good morning, Gopher!\n", false},

	{"ExampleExpandEnv", _xtest.ExampleExpandEnv, "gopher lives in /usr/gopher.\n", false},

	{"ExampleLookupEnv", _xtest.ExampleLookupEnv, "USER=gopher\nGOPATH not set\n", false},

	{"ExampleGetenv", _xtest.ExampleGetenv, "gopher lives in /usr/gopher.\n", false},

}

func init() {
	testdeps.ImportPath = "os"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}



package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "text/template"


	_xtest "text/template_test"


)

var tests = []testing.InternalTest{

	{"TestExecute", _test.TestExecute},

	{"TestDelims", _test.TestDelims},

	{"TestExecuteError", _test.TestExecuteError},

	{"TestExecError", _test.TestExecError},

	{"TestJSEscaping", _test.TestJSEscaping},

	{"TestTree", _test.TestTree},

	{"TestExecuteOnNewTemplate", _test.TestExecuteOnNewTemplate},

	{"TestMessageForExecuteEmpty", _test.TestMessageForExecuteEmpty},

	{"TestFinalForPrintf", _test.TestFinalForPrintf},

	{"TestComparison", _test.TestComparison},

	{"TestMissingMapKey", _test.TestMissingMapKey},

	{"TestUnterminatedStringError", _test.TestUnterminatedStringError},

	{"TestExecuteGivesExecError", _test.TestExecuteGivesExecError},

	{"TestGoodFuncNames", _test.TestGoodFuncNames},

	{"TestBadFuncNames", _test.TestBadFuncNames},

	{"TestBlock", _test.TestBlock},

	{"TestMissingFieldOnNil", _test.TestMissingFieldOnNil},

	{"TestMaxExecDepth", _test.TestMaxExecDepth},

	{"TestAddrOfIndex", _test.TestAddrOfIndex},

	{"TestInterfaceValues", _test.TestInterfaceValues},

	{"TestMultiParse", _test.TestMultiParse},

	{"TestMultiExecute", _test.TestMultiExecute},

	{"TestParseFiles", _test.TestParseFiles},

	{"TestParseGlob", _test.TestParseGlob},

	{"TestParseFilesWithData", _test.TestParseFilesWithData},

	{"TestParseGlobWithData", _test.TestParseGlobWithData},

	{"TestClone", _test.TestClone},

	{"TestAddParseTree", _test.TestAddParseTree},

	{"TestAddParseTreeToUnparsedTemplate", _test.TestAddParseTreeToUnparsedTemplate},

	{"TestRedefinition", _test.TestRedefinition},

	{"TestEmptyTemplateCloneCrash", _test.TestEmptyTemplateCloneCrash},

	{"TestTemplateLookUp", _test.TestTemplateLookUp},

	{"TestNew", _test.TestNew},

	{"TestParse", _test.TestParse},

	{"TestEmptyTemplate", _test.TestEmptyTemplate},

	{"TestIssue19294", _test.TestIssue19294},

}

var benchmarks = []testing.InternalBenchmark{

}

var examples = []testing.InternalExample{

	{"ExampleTemplate", _xtest.ExampleTemplate, "Dear Aunt Mildred,\n\nIt was a pleasure to see you at the wedding.\nThank you for the lovely bone china tea set.\n\nBest wishes,\nJosie\n\nDear Uncle John,\n\nIt is a shame you couldn't make it to the wedding.\nThank you for the lovely moleskin pants.\n\nBest wishes,\nJosie\n\nDear Cousin Rodney,\n\nIt is a shame you couldn't make it to the wedding.\n\nBest wishes,\nJosie\n", false},

	{"ExampleTemplate_block", _xtest.ExampleTemplate_block, "Names:\n- Gamora\n- Groot\n- Nebula\n- Rocket\n- Star-Lord\nNames: Gamora, Groot, Nebula, Rocket, Star-Lord\n", false},

	{"ExampleTemplate_glob", _xtest.ExampleTemplate_glob, "T0 invokes T1: (T1 invokes T2: (This is T2))\n", false},

	{"ExampleTemplate_helpers", _xtest.ExampleTemplate_helpers, "Driver 1 calls T1: (T1 invokes T2: (This is T2))\nDriver 2 calls T2: (This is T2)\n", false},

	{"ExampleTemplate_share", _xtest.ExampleTemplate_share, "T0 (second version) invokes T1: (T1 invokes T2: (T2, version B))\nT0 (first version) invokes T1: (T1 invokes T2: (T2, version A))\n", false},

	{"ExampleTemplate_func", _xtest.ExampleTemplate_func, "Input: \"the go programming language\"\nOutput 0: The Go Programming Language\nOutput 1: \"The Go Programming Language\"\nOutput 2: \"The Go Programming Language\"\n", false},

}

func init() {
	testdeps.ImportPath = "text/template"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


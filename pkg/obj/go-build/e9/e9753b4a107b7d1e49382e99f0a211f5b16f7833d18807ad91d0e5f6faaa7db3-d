
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "path"


	_xtest "path_test"


)

var tests = []testing.InternalTest{

	{"TestMatch", _test.TestMatch},

	{"TestClean", _test.TestClean},

	{"TestCleanMallocs", _test.TestCleanMallocs},

	{"TestSplit", _test.TestSplit},

	{"TestJoin", _test.TestJoin},

	{"TestExt", _test.TestExt},

	{"TestBase", _test.TestBase},

	{"TestDir", _test.TestDir},

	{"TestIsAbs", _test.TestIsAbs},

}

var benchmarks = []testing.InternalBenchmark{

}

var examples = []testing.InternalExample{

	{"ExampleBase", _xtest.ExampleBase, "b\n/\n.\n", false},

	{"ExampleClean", _xtest.ExampleClean, "Clean(\"a/c\") = \"a/c\"\nClean(\"a//c\") = \"a/c\"\nClean(\"a/c/.\") = \"a/c\"\nClean(\"a/c/b/..\") = \"a/c\"\nClean(\"/../a/c\") = \"/a/c\"\nClean(\"/../a/b/../././/c\") = \"/a/c\"\nClean(\"\") = \".\"\n", false},

	{"ExampleDir", _xtest.ExampleDir, "/a/b\na/b\n/a\na\n/\n.\n", false},

	{"ExampleExt", _xtest.ExampleExt, ".css\n", false},

	{"ExampleIsAbs", _xtest.ExampleIsAbs, "true\n", false},

	{"ExampleJoin", _xtest.ExampleJoin, "a/b/c\na/b/c\na/b/c\n\na\na\n", false},

	{"ExampleMatch", _xtest.ExampleMatch, "true <nil>\ntrue <nil>\nfalse <nil>\n", false},

	{"ExampleSplit", _xtest.ExampleSplit, "static/ myfile.css\n myfile.css\n", false},

}

func init() {
	testdeps.ImportPath = "path"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}



package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "strconv"


	_xtest "strconv_test"


)

var tests = []testing.InternalTest{

	{"TestParseBool", _xtest.TestParseBool},

	{"TestFormatBool", _xtest.TestFormatBool},

	{"TestAppendBool", _xtest.TestAppendBool},

	{"TestAtof", _xtest.TestAtof},

	{"TestAtofSlow", _xtest.TestAtofSlow},

	{"TestAtofRandom", _xtest.TestAtofRandom},

	{"TestRoundTrip", _xtest.TestRoundTrip},

	{"TestRoundTrip32", _xtest.TestRoundTrip32},

	{"TestParseUint32", _xtest.TestParseUint32},

	{"TestParseUint64", _xtest.TestParseUint64},

	{"TestParseUint64Base", _xtest.TestParseUint64Base},

	{"TestParseInt32", _xtest.TestParseInt32},

	{"TestParseInt64", _xtest.TestParseInt64},

	{"TestParseInt64Base", _xtest.TestParseInt64Base},

	{"TestParseUint", _xtest.TestParseUint},

	{"TestParseInt", _xtest.TestParseInt},

	{"TestAtoi", _xtest.TestAtoi},

	{"TestParseIntBitSize", _xtest.TestParseIntBitSize},

	{"TestParseUintBitSize", _xtest.TestParseUintBitSize},

	{"TestParseIntBase", _xtest.TestParseIntBase},

	{"TestParseUintBase", _xtest.TestParseUintBase},

	{"TestNumError", _xtest.TestNumError},

	{"TestDecimalShift", _xtest.TestDecimalShift},

	{"TestDecimalRound", _xtest.TestDecimalRound},

	{"TestDecimalRoundedInteger", _xtest.TestDecimalRoundedInteger},

	{"TestFp", _xtest.TestFp},

	{"TestFtoa", _xtest.TestFtoa},

	{"TestFtoaRandom", _xtest.TestFtoaRandom},

	{"TestItoa", _xtest.TestItoa},

	{"TestUitoa", _xtest.TestUitoa},

	{"TestFormatUintVarlen", _xtest.TestFormatUintVarlen},

	{"TestIsPrint", _xtest.TestIsPrint},

	{"TestIsGraphic", _xtest.TestIsGraphic},

	{"TestQuote", _xtest.TestQuote},

	{"TestQuoteToASCII", _xtest.TestQuoteToASCII},

	{"TestQuoteToGraphic", _xtest.TestQuoteToGraphic},

	{"TestQuoteRune", _xtest.TestQuoteRune},

	{"TestQuoteRuneToASCII", _xtest.TestQuoteRuneToASCII},

	{"TestQuoteRuneToGraphic", _xtest.TestQuoteRuneToGraphic},

	{"TestCanBackquote", _xtest.TestCanBackquote},

	{"TestUnquote", _xtest.TestUnquote},

	{"TestUnquoteInvalidUTF8", _xtest.TestUnquoteInvalidUTF8},

	{"TestCountMallocs", _xtest.TestCountMallocs},

	{"TestErrorPrefixes", _xtest.TestErrorPrefixes},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkAtof64Decimal", _xtest.BenchmarkAtof64Decimal},

	{"BenchmarkAtof64Float", _xtest.BenchmarkAtof64Float},

	{"BenchmarkAtof64FloatExp", _xtest.BenchmarkAtof64FloatExp},

	{"BenchmarkAtof64Big", _xtest.BenchmarkAtof64Big},

	{"BenchmarkAtof64RandomBits", _xtest.BenchmarkAtof64RandomBits},

	{"BenchmarkAtof64RandomFloats", _xtest.BenchmarkAtof64RandomFloats},

	{"BenchmarkAtof32Decimal", _xtest.BenchmarkAtof32Decimal},

	{"BenchmarkAtof32Float", _xtest.BenchmarkAtof32Float},

	{"BenchmarkAtof32FloatExp", _xtest.BenchmarkAtof32FloatExp},

	{"BenchmarkAtof32Random", _xtest.BenchmarkAtof32Random},

	{"BenchmarkParseInt", _xtest.BenchmarkParseInt},

	{"BenchmarkAtoi", _xtest.BenchmarkAtoi},

	{"BenchmarkFormatFloat", _xtest.BenchmarkFormatFloat},

	{"BenchmarkAppendFloat", _xtest.BenchmarkAppendFloat},

	{"BenchmarkFormatInt", _xtest.BenchmarkFormatInt},

	{"BenchmarkAppendInt", _xtest.BenchmarkAppendInt},

	{"BenchmarkFormatUint", _xtest.BenchmarkFormatUint},

	{"BenchmarkAppendUint", _xtest.BenchmarkAppendUint},

	{"BenchmarkFormatIntSmall", _xtest.BenchmarkFormatIntSmall},

	{"BenchmarkAppendIntSmall", _xtest.BenchmarkAppendIntSmall},

	{"BenchmarkAppendUintVarlen", _xtest.BenchmarkAppendUintVarlen},

	{"BenchmarkQuote", _xtest.BenchmarkQuote},

	{"BenchmarkQuoteRune", _xtest.BenchmarkQuoteRune},

	{"BenchmarkAppendQuote", _xtest.BenchmarkAppendQuote},

	{"BenchmarkAppendQuoteRune", _xtest.BenchmarkAppendQuoteRune},

	{"BenchmarkUnquoteEasy", _xtest.BenchmarkUnquoteEasy},

	{"BenchmarkUnquoteHard", _xtest.BenchmarkUnquoteHard},

}

var examples = []testing.InternalExample{

	{"ExampleAppendBool", _xtest.ExampleAppendBool, "bool:true\n", false},

	{"ExampleAppendFloat", _xtest.ExampleAppendFloat, "float32:3.1415927E+00\nfloat64:3.1415926535E+00\n", false},

	{"ExampleAppendInt", _xtest.ExampleAppendInt, "int (base 10):-42\nint (base 16):-2a\n", false},

	{"ExampleAppendQuote", _xtest.ExampleAppendQuote, "quote:\"\\\"Fran & Freddie's Diner\\\"\"\n", false},

	{"ExampleAppendQuoteRune", _xtest.ExampleAppendQuoteRune, "rune:'☺'\n", false},

	{"ExampleAppendQuoteRuneToASCII", _xtest.ExampleAppendQuoteRuneToASCII, "rune (ascii):'\\u263a'\n", false},

	{"ExampleAppendQuoteToASCII", _xtest.ExampleAppendQuoteToASCII, "quote (ascii):\"\\\"Fran & Freddie's Diner\\\"\"\n", false},

	{"ExampleAppendUint", _xtest.ExampleAppendUint, "uint (base 10):42\nuint (base 16):2a\n", false},

	{"ExampleAtoi", _xtest.ExampleAtoi, "int, 10\n", false},

	{"ExampleCanBackquote", _xtest.ExampleCanBackquote, "true\nfalse\n", false},

	{"ExampleFormatBool", _xtest.ExampleFormatBool, "string, true\n", false},

	{"ExampleFormatFloat", _xtest.ExampleFormatFloat, "string, 3.1415927E+00\nstring, 3.1415926535E+00\n", false},

	{"ExampleFormatInt", _xtest.ExampleFormatInt, "string, -42\nstring, -2a\n", false},

	{"ExampleFormatUint", _xtest.ExampleFormatUint, "string, 42\nstring, 2a\n", false},

	{"ExampleIsPrint", _xtest.ExampleIsPrint, "true\nfalse\n", false},

	{"ExampleItoa", _xtest.ExampleItoa, "string, 10\n", false},

	{"ExampleParseBool", _xtest.ExampleParseBool, "bool, true\n", false},

	{"ExampleParseFloat", _xtest.ExampleParseFloat, "float64, 3.1415927410125732\nfloat64, 3.1415926535\n", false},

	{"ExampleParseInt", _xtest.ExampleParseInt, "int64, -354634382\nint64, -3546343826724305832\n", false},

	{"ExampleParseUint", _xtest.ExampleParseUint, "uint64, 42\nuint64, 42\n", false},

	{"ExampleQuote", _xtest.ExampleQuote, "\"\\\"Fran & Freddie's Diner\\t☺\\\"\"\n", false},

	{"ExampleQuoteRune", _xtest.ExampleQuoteRune, "'☺'\n", false},

	{"ExampleQuoteRuneToASCII", _xtest.ExampleQuoteRuneToASCII, "'\\u263a'\n", false},

	{"ExampleQuoteToASCII", _xtest.ExampleQuoteToASCII, "\"\\\"Fran & Freddie's Diner\\t\\u263a\\\"\"\n", false},

	{"ExampleUnquote", _xtest.ExampleUnquote, "\"\", invalid syntax\n\"The string must be either double-quoted\", <nil>\n\"or backquoted.\", <nil>\n\"☺\", <nil>\n\"\", invalid syntax\n", false},

	{"ExampleUnquoteChar", _xtest.ExampleUnquoteChar, "value: \"\nmultibyte: false\ntail: Fran & Freddie's Diner\\\"\n", false},

	{"ExampleNumError", _xtest.ExampleNumError, "Func: ParseFloat\nNum: Not a number\nErr: invalid syntax\nstrconv.ParseFloat: parsing \"Not a number\": invalid syntax\n", false},

}

func init() {
	testdeps.ImportPath = "strconv"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


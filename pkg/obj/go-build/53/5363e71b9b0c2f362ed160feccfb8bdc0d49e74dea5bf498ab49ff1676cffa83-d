// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/fpf/Downloads/go1.11.1/misc/cgo/test/basic.go:1:1
// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Basic test cases for cgo.

package cgotest; import _cgo_unsafe "unsafe"

/*
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <errno.h>

#define SHIFT(x, y)  ((x)<<(y))
#define KILO SHIFT(1, 10)
#define UINT32VAL 0xc008427bU

enum E {
	Enum1 = 1,
	Enum2 = 2,
};

typedef unsigned char cgo_uuid_t[20];

void uuid_generate(cgo_uuid_t x) {
	x[0] = 0;
}

struct S {
	int x;
};

const char *cstr = "abcefghijklmnopqrstuvwxyzABCEFGHIJKLMNOPQRSTUVWXYZ1234567890";

extern enum E myConstFunc(struct S* const ctx, int const id, struct S **const filter);

enum E myConstFunc(struct S *const ctx, int const id, struct S **const filter) { return 0; }

// issue 1222
typedef union {
	long align;
} xxpthread_mutex_t;

struct ibv_async_event {
	union {
		int x;
	} element;
};

struct ibv_context {
	xxpthread_mutex_t mutex;
};

int add(int x, int y) {
	return x+y;
};
*/
import _ "unsafe"
import (
	"runtime"
	"syscall"
	"testing"
	"unsafe"
)

const EINVAL = (_Ciconst_EINVAL) /* test #define */

var KILO = (_Ciconst_KILO)

func uuidgen() {
	var uuid _Ctype_cgo_uuid_t
	(_Cfunc_uuid_generate)(&uuid[0])
}

func Strtol(s string, base int) (int, error) {
	p := (_Cfunc_CString)(s)
	n, err := (_C2func_strtol)(p, nil, _Ctype_int(base))
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(p))
	return int(n), err
}

func Atol(s string) int {
	p := (_Cfunc_CString)(s)
	n := (_Cfunc_atol)(p)
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(p))
	return int(n)
}

func testConst(t *testing.T) {
	(_Cfunc_myConstFunc)(nil, 0, nil)
}

func testEnum(t *testing.T) {
	if (_Ciconst_Enum1) != 1 || (_Ciconst_Enum2) != 2 {
		t.Error("bad enum", (_Ciconst_Enum1), (_Ciconst_Enum2))
	}
}

func testAtol(t *testing.T) {
	l := Atol("123")
	if l != 123 {
		t.Error("Atol 123: ", l)
	}
}

func testErrno(t *testing.T) {
	p := (_Cfunc_CString)("no-such-file")
	m := (_Cfunc_CString)("r")
	f, err := (_C2func_fopen)(p, m)
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(p))
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(m))
	if err == nil {
		func(_cgo0 *_Ctype_struct___sFILE) _Ctype_int {;	_cgoCheckPointer(_cgo0);	return (_Cfunc_fclose)(_cgo0);}(f)
		t.Fatalf("C.fopen: should fail")
	}
	if err != syscall.ENOENT {
		t.Fatalf("C.fopen: unexpected error: %v", err)
	}
}

func testMultipleAssign(t *testing.T) {
	p := (_Cfunc_CString)("234")
	n, m := (_Cfunc_strtol)(p, nil, 345), (_Cfunc_strtol)(p, nil, 10)
	if runtime.GOOS == "openbsd" {
		// Bug in OpenBSD strtol(3) - base > 36 succeeds.
		if (n != 0 && n != 239089) || m != 234 {
			t.Fatal("Strtol x2: ", n, m)
		}
	} else if n != 0 || m != 234 {
		t.Fatal("Strtol x2: ", n, m)
	}
	func(_cgo0 _cgo_unsafe.Pointer) {;	_cgoCheckPointer(_cgo0);	(_Cfunc_free)(_cgo0);}(unsafe.Pointer(p))
}

var (
	cuint  = (_Ctype_uint)(0)
	culong _Ctype_ulong
	cchar  _Ctype_char
)

type Context struct {
	ctx *_Ctype_struct_ibv_context
}

func benchCgoCall(b *testing.B) {
	const x = _Ctype_int(2)
	const y = _Ctype_int(3)
	for i := 0; i < b.N; i++ {
		(_Cfunc_add)(x, y)
	}
}

var sinkString string

func benchGoString(b *testing.B) {
	for i := 0; i < b.N; i++ {
		sinkString = (_Cfunc_GoString)((*_Cvar_cstr))
	}
	const want = "abcefghijklmnopqrstuvwxyzABCEFGHIJKLMNOPQRSTUVWXYZ1234567890"
	if sinkString != want {
		b.Fatalf("%q != %q", sinkString, want)
	}
}

// Issue 2470.
func testUnsignedInt(t *testing.T) {
	a := (int64)((_Ciconst_UINT32VAL))
	b := (int64)(0xc008427b)
	if a != b {
		t.Errorf("Incorrect unsigned int - got %x, want %x", a, b)
	}
}

// Static (build-time) test that syntax traversal visits all operands of s[i:j:k].
func sliceOperands(array [2000]int) {
	_ = array[(_Ciconst_KILO):(_Ciconst_KILO):(_Ciconst_KILO)] // no type error
}

// set in cgo_thread_lock.go init
var testThreadLockFunc = func(*testing.T) {}

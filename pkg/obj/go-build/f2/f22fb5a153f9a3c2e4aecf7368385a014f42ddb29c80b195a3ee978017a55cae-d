//go:cgo_ldflag "-g"
//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "CoreFoundation"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "CoreFoundation"
// Code generated by cmd/cgo; DO NOT EDIT.

package issue24161arg

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_Boolean = _Ctype_uchar

type _Ctype_CFAllocatorRef uintptr

type _Ctype_CFArrayCallBacks = _Ctype_struct___0

type _Ctype_CFArrayCopyDescriptionCallBack *[0]byte

type _Ctype_CFArrayEqualCallBack *[0]byte

type _Ctype_CFArrayRef uintptr

type _Ctype_CFArrayReleaseCallBack *[0]byte

type _Ctype_CFArrayRetainCallBack *[0]byte

type _Ctype_CFIndex = _Ctype_long

type _Ctype_CFStringRef uintptr

type _Ctype_CFTypeID = _Ctype_ulong

type _Ctype_long int64

type _Ctype_struct___0 struct {
	version		_Ctype_CFIndex
	retain		_Ctype_CFArrayRetainCallBack
	release		_Ctype_CFArrayReleaseCallBack
	copyDescription	_Ctype_CFArrayCopyDescriptionCallBack
	equal		_Ctype_CFArrayEqualCallBack
}

type _Ctype_struct___1 struct {
	version		_Ctype_CFIndex
	retain		_Ctype_CFArrayRetainCallBack
	release		_Ctype_CFArrayReleaseCallBack
	copyDescription	_Ctype_CFArrayCopyDescriptionCallBack
	equal		_Ctype_CFArrayEqualCallBack
}

type _Ctype_struct___CFAllocator struct{}

type _Ctype_struct___CFArray struct{}

type _Ctype_struct___CFString struct{}

type _Ctype_uchar uint8

type _Ctype_ulong uint64

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgo_runtime_cgocallback runtime.cgocallback
func _cgo_runtime_cgocallback(unsafe.Pointer, unsafe.Pointer, uintptr, uintptr)

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, ...interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})

//go:cgo_import_static _cgo_b05f773beec3_Cfunc_CFArrayCreate
//go:linkname __cgofn__cgo_b05f773beec3_Cfunc_CFArrayCreate _cgo_b05f773beec3_Cfunc_CFArrayCreate
var __cgofn__cgo_b05f773beec3_Cfunc_CFArrayCreate byte
var _cgo_b05f773beec3_Cfunc_CFArrayCreate = unsafe.Pointer(&__cgofn__cgo_b05f773beec3_Cfunc_CFArrayCreate)

//go:cgo_unsafe_args
func _Cfunc_CFArrayCreate(p0 _Ctype_CFAllocatorRef, p1 *unsafe.Pointer, p2 _Ctype_CFIndex, p3 *_Ctype_struct___0) (r1 _Ctype_CFArrayRef) {
	_cgo_runtime_cgocall(_cgo_b05f773beec3_Cfunc_CFArrayCreate, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
		_Cgo_use(p3)
	}
	return
}
//go:cgo_import_static _cgo_b05f773beec3_Cfunc_CFArrayCreateCopy
//go:linkname __cgofn__cgo_b05f773beec3_Cfunc_CFArrayCreateCopy _cgo_b05f773beec3_Cfunc_CFArrayCreateCopy
var __cgofn__cgo_b05f773beec3_Cfunc_CFArrayCreateCopy byte
var _cgo_b05f773beec3_Cfunc_CFArrayCreateCopy = unsafe.Pointer(&__cgofn__cgo_b05f773beec3_Cfunc_CFArrayCreateCopy)

//go:cgo_unsafe_args
func _Cfunc_CFArrayCreateCopy(p0 _Ctype_CFAllocatorRef, p1 _Ctype_CFArrayRef) (r1 _Ctype_CFArrayRef) {
	_cgo_runtime_cgocall(_cgo_b05f773beec3_Cfunc_CFArrayCreateCopy, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}

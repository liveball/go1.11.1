
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "image/png"


	_ "image/png_test"


)

var tests = []testing.InternalTest{

	{"TestPaeth", _test.TestPaeth},

	{"TestPaethDecode", _test.TestPaethDecode},

	{"TestReader", _test.TestReader},

	{"TestReaderError", _test.TestReaderError},

	{"TestPalettedDecodeConfig", _test.TestPalettedDecodeConfig},

	{"TestInterlaced", _test.TestInterlaced},

	{"TestIncompleteIDATOnRowBoundary", _test.TestIncompleteIDATOnRowBoundary},

	{"TestTrailingIDATChunks", _test.TestTrailingIDATChunks},

	{"TestMultipletRNSChunks", _test.TestMultipletRNSChunks},

	{"TestUnknownChunkLengthUnderflow", _test.TestUnknownChunkLengthUnderflow},

	{"TestGray8Transparent", _test.TestGray8Transparent},

	{"TestDimensionOverflow", _test.TestDimensionOverflow},

	{"TestWriter", _test.TestWriter},

	{"TestWriterLevels", _test.TestWriterLevels},

	{"TestSubImage", _test.TestSubImage},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkPaeth", _test.BenchmarkPaeth},

	{"BenchmarkDecodeGray", _test.BenchmarkDecodeGray},

	{"BenchmarkDecodeNRGBAGradient", _test.BenchmarkDecodeNRGBAGradient},

	{"BenchmarkDecodeNRGBAOpaque", _test.BenchmarkDecodeNRGBAOpaque},

	{"BenchmarkDecodePaletted", _test.BenchmarkDecodePaletted},

	{"BenchmarkDecodeRGB", _test.BenchmarkDecodeRGB},

	{"BenchmarkDecodeInterlacing", _test.BenchmarkDecodeInterlacing},

	{"BenchmarkEncodeGray", _test.BenchmarkEncodeGray},

	{"BenchmarkEncodeGrayWithBufferPool", _test.BenchmarkEncodeGrayWithBufferPool},

	{"BenchmarkEncodeNRGBOpaque", _test.BenchmarkEncodeNRGBOpaque},

	{"BenchmarkEncodeNRGBA", _test.BenchmarkEncodeNRGBA},

	{"BenchmarkEncodePaletted", _test.BenchmarkEncodePaletted},

	{"BenchmarkEncodeRGBOpaque", _test.BenchmarkEncodeRGBOpaque},

	{"BenchmarkEncodeRGBA", _test.BenchmarkEncodeRGBA},

}

var examples = []testing.InternalExample{

}

func init() {
	testdeps.ImportPath = "image/png"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


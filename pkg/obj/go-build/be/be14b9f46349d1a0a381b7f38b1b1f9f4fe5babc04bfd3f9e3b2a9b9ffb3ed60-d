//go:cgo_ldflag "-g"
//go:cgo_ldflag "-O2"
// Code generated by cmd/cgo; DO NOT EDIT.

package stdio

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_FILE = _Ctype_struct___sFILE

type _Ctype___darwin_off_t = _Ctype___int64_t

type _Ctype___int64_t = _Ctype_longlong

type _Ctype_char int8

type _Ctype_fpos_t = _Ctype___darwin_off_t

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_longlong int64

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_short int16

type _Ctype_struct___sFILE struct {
	_p		*_Ctype_uchar
	_r		_Ctype_int
	_w		_Ctype_int
	_flags		_Ctype_short
	_file		_Ctype_short
	_		[4]byte
	_bf		_Ctype_struct___sbuf
	_lbfsize	_Ctype_int
	_		[4]byte
	_cookie		unsafe.Pointer
	_close		*[0]byte
	_read		*[0]byte
	_seek		*[0]byte
	_write		*[0]byte
	_ub		_Ctype_struct___sbuf
	_extra		*_Ctype_struct___sFILEX
	_ur		_Ctype_int
	_ubuf		[3]_Ctype_uchar
	_nbuf		[1]_Ctype_uchar
	_lb		_Ctype_struct___sbuf
	_blksize	_Ctype_int
	_		[4]byte
	_offset		_Ctype_fpos_t
}

type _Ctype_struct___sFILEX struct{}

type _Ctype_struct___sbuf struct {
	_base	*_Ctype_uchar
	_size	_Ctype_int
	_	[4]byte
}

type _Ctype_uchar uint8

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgo_runtime_cgocallback runtime.cgocallback
func _cgo_runtime_cgocallback(unsafe.Pointer, unsafe.Pointer, uintptr, uintptr)

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, ...interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
//go:linkname __cgo_greeting greeting
//go:cgo_import_static greeting
var __cgo_greeting byte
var _Cvar_greeting **_Ctype_char = (**_Ctype_char)(unsafe.Pointer(&__cgo_greeting))


func _Cfunc_CString(s string) *_Ctype_char {
	p := _cgo_cmalloc(uint64(len(s)+1))
	pp := (*[1<<30]byte)(p)
	copy(pp[:], s)
	pp[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gobytes runtime.gobytes
func _cgo_runtime_gobytes(unsafe.Pointer, int) []byte

func _Cfunc_GoBytes(p unsafe.Pointer, l _Ctype_int) []byte {
	return _cgo_runtime_gobytes(p, int(l))
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}
//go:cgo_import_static _cgo_e7384d1fdcfc_Cfunc_fflush
//go:linkname __cgofn__cgo_e7384d1fdcfc_Cfunc_fflush _cgo_e7384d1fdcfc_Cfunc_fflush
var __cgofn__cgo_e7384d1fdcfc_Cfunc_fflush byte
var _cgo_e7384d1fdcfc_Cfunc_fflush = unsafe.Pointer(&__cgofn__cgo_e7384d1fdcfc_Cfunc_fflush)

//go:cgo_unsafe_args
func _Cfunc_fflush(p0 *_Ctype_struct___sFILE) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_e7384d1fdcfc_Cfunc_fflush, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_e7384d1fdcfc_Cfunc_fputs
//go:linkname __cgofn__cgo_e7384d1fdcfc_Cfunc_fputs _cgo_e7384d1fdcfc_Cfunc_fputs
var __cgofn__cgo_e7384d1fdcfc_Cfunc_fputs byte
var _cgo_e7384d1fdcfc_Cfunc_fputs = unsafe.Pointer(&__cgofn__cgo_e7384d1fdcfc_Cfunc_fputs)

//go:cgo_unsafe_args
func _Cfunc_fputs(p0 *_Ctype_char, p1 *_Ctype_struct___sFILE) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_e7384d1fdcfc_Cfunc_fputs, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_e7384d1fdcfc_Cfunc_free
//go:linkname __cgofn__cgo_e7384d1fdcfc_Cfunc_free _cgo_e7384d1fdcfc_Cfunc_free
var __cgofn__cgo_e7384d1fdcfc_Cfunc_free byte
var _cgo_e7384d1fdcfc_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_e7384d1fdcfc_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_e7384d1fdcfc_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_e7384d1fdcfc_Cfunc_getStderr
//go:linkname __cgofn__cgo_e7384d1fdcfc_Cfunc_getStderr _cgo_e7384d1fdcfc_Cfunc_getStderr
var __cgofn__cgo_e7384d1fdcfc_Cfunc_getStderr byte
var _cgo_e7384d1fdcfc_Cfunc_getStderr = unsafe.Pointer(&__cgofn__cgo_e7384d1fdcfc_Cfunc_getStderr)

//go:cgo_unsafe_args
func _Cfunc_getStderr() (r1 *_Ctype_struct___sFILE) {
	_cgo_runtime_cgocall(_cgo_e7384d1fdcfc_Cfunc_getStderr, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}
//go:cgo_import_static _cgo_e7384d1fdcfc_Cfunc_getStdout
//go:linkname __cgofn__cgo_e7384d1fdcfc_Cfunc_getStdout _cgo_e7384d1fdcfc_Cfunc_getStdout
var __cgofn__cgo_e7384d1fdcfc_Cfunc_getStdout byte
var _cgo_e7384d1fdcfc_Cfunc_getStdout = unsafe.Pointer(&__cgofn__cgo_e7384d1fdcfc_Cfunc_getStdout)

//go:cgo_unsafe_args
func _Cfunc_getStdout() (r1 *_Ctype_struct___sFILE) {
	_cgo_runtime_cgocall(_cgo_e7384d1fdcfc_Cfunc_getStdout, uintptr(unsafe.Pointer(&r1)))
	if _Cgo_always_false {
	}
	return
}

//go:cgo_import_static _cgo_e7384d1fdcfc_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_e7384d1fdcfc_Cfunc__Cmalloc _cgo_e7384d1fdcfc_Cfunc__Cmalloc
var __cgofn__cgo_e7384d1fdcfc_Cfunc__Cmalloc byte
var _cgo_e7384d1fdcfc_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_e7384d1fdcfc_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_e7384d1fdcfc_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}


package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "strings"


	_xtest "strings_test"


)

var tests = []testing.InternalTest{

	{"TestBuilder", _xtest.TestBuilder},

	{"TestBuilderString", _xtest.TestBuilderString},

	{"TestBuilderReset", _xtest.TestBuilderReset},

	{"TestBuilderGrow", _xtest.TestBuilderGrow},

	{"TestBuilderWrite2", _xtest.TestBuilderWrite2},

	{"TestBuilderWriteByte", _xtest.TestBuilderWriteByte},

	{"TestBuilderAllocs", _xtest.TestBuilderAllocs},

	{"TestBuilderCopyPanic", _xtest.TestBuilderCopyPanic},

	{"TestCompare", _xtest.TestCompare},

	{"TestCompareIdenticalString", _xtest.TestCompareIdenticalString},

	{"TestCompareStrings", _xtest.TestCompareStrings},

	{"TestReader", _xtest.TestReader},

	{"TestReadAfterBigSeek", _xtest.TestReadAfterBigSeek},

	{"TestReaderAt", _xtest.TestReaderAt},

	{"TestReaderAtConcurrent", _xtest.TestReaderAtConcurrent},

	{"TestEmptyReaderConcurrent", _xtest.TestEmptyReaderConcurrent},

	{"TestWriteTo", _xtest.TestWriteTo},

	{"TestReaderLenSize", _xtest.TestReaderLenSize},

	{"TestReaderReset", _xtest.TestReaderReset},

	{"TestReplacer", _xtest.TestReplacer},

	{"TestPickAlgorithm", _xtest.TestPickAlgorithm},

	{"TestWriteStringError", _xtest.TestWriteStringError},

	{"TestGenericTrieBuilding", _xtest.TestGenericTrieBuilding},

	{"TestFinderNext", _xtest.TestFinderNext},

	{"TestFinderCreation", _xtest.TestFinderCreation},

	{"TestIndex", _xtest.TestIndex},

	{"TestLastIndex", _xtest.TestLastIndex},

	{"TestIndexAny", _xtest.TestIndexAny},

	{"TestLastIndexAny", _xtest.TestLastIndexAny},

	{"TestLastIndexByte", _xtest.TestLastIndexByte},

	{"TestIndexRandom", _xtest.TestIndexRandom},

	{"TestIndexRune", _xtest.TestIndexRune},

	{"TestSplit", _xtest.TestSplit},

	{"TestSplitAfter", _xtest.TestSplitAfter},

	{"TestFields", _xtest.TestFields},

	{"TestFieldsFunc", _xtest.TestFieldsFunc},

	{"TestMap", _xtest.TestMap},

	{"TestToUpper", _xtest.TestToUpper},

	{"TestToLower", _xtest.TestToLower},

	{"TestSpecialCase", _xtest.TestSpecialCase},

	{"TestTrimSpace", _xtest.TestTrimSpace},

	{"TestTrim", _xtest.TestTrim},

	{"TestTrimFunc", _xtest.TestTrimFunc},

	{"TestIndexFunc", _xtest.TestIndexFunc},

	{"TestCaseConsistency", _xtest.TestCaseConsistency},

	{"TestRepeat", _xtest.TestRepeat},

	{"TestRepeatCatchesOverflow", _xtest.TestRepeatCatchesOverflow},

	{"TestRunes", _xtest.TestRunes},

	{"TestReadByte", _xtest.TestReadByte},

	{"TestReadRune", _xtest.TestReadRune},

	{"TestUnreadRuneError", _xtest.TestUnreadRuneError},

	{"TestReplace", _xtest.TestReplace},

	{"TestTitle", _xtest.TestTitle},

	{"TestContains", _xtest.TestContains},

	{"TestContainsAny", _xtest.TestContainsAny},

	{"TestContainsRune", _xtest.TestContainsRune},

	{"TestEqualFold", _xtest.TestEqualFold},

	{"TestCount", _xtest.TestCount},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkBuildString_Builder", _xtest.BenchmarkBuildString_Builder},

	{"BenchmarkBuildString_ByteBuffer", _xtest.BenchmarkBuildString_ByteBuffer},

	{"BenchmarkGenericNoMatch", _xtest.BenchmarkGenericNoMatch},

	{"BenchmarkGenericMatch1", _xtest.BenchmarkGenericMatch1},

	{"BenchmarkGenericMatch2", _xtest.BenchmarkGenericMatch2},

	{"BenchmarkSingleMaxSkipping", _xtest.BenchmarkSingleMaxSkipping},

	{"BenchmarkSingleLongSuffixFail", _xtest.BenchmarkSingleLongSuffixFail},

	{"BenchmarkSingleMatch", _xtest.BenchmarkSingleMatch},

	{"BenchmarkByteByteNoMatch", _xtest.BenchmarkByteByteNoMatch},

	{"BenchmarkByteByteMatch", _xtest.BenchmarkByteByteMatch},

	{"BenchmarkByteStringMatch", _xtest.BenchmarkByteStringMatch},

	{"BenchmarkHTMLEscapeNew", _xtest.BenchmarkHTMLEscapeNew},

	{"BenchmarkHTMLEscapeOld", _xtest.BenchmarkHTMLEscapeOld},

	{"BenchmarkByteStringReplacerWriteString", _xtest.BenchmarkByteStringReplacerWriteString},

	{"BenchmarkByteReplacerWriteString", _xtest.BenchmarkByteReplacerWriteString},

	{"BenchmarkByteByteReplaces", _xtest.BenchmarkByteByteReplaces},

	{"BenchmarkByteByteMap", _xtest.BenchmarkByteByteMap},

	{"BenchmarkMap", _xtest.BenchmarkMap},

	{"BenchmarkIndexRune", _xtest.BenchmarkIndexRune},

	{"BenchmarkIndexRuneLongString", _xtest.BenchmarkIndexRuneLongString},

	{"BenchmarkIndexRuneFastPath", _xtest.BenchmarkIndexRuneFastPath},

	{"BenchmarkIndex", _xtest.BenchmarkIndex},

	{"BenchmarkLastIndex", _xtest.BenchmarkLastIndex},

	{"BenchmarkIndexByte", _xtest.BenchmarkIndexByte},

	{"BenchmarkToUpper", _xtest.BenchmarkToUpper},

	{"BenchmarkToLower", _xtest.BenchmarkToLower},

	{"BenchmarkMapNoChanges", _xtest.BenchmarkMapNoChanges},

	{"BenchmarkTrim", _xtest.BenchmarkTrim},

	{"BenchmarkEqualFold", _xtest.BenchmarkEqualFold},

	{"BenchmarkIndexHard1", _xtest.BenchmarkIndexHard1},

	{"BenchmarkIndexHard2", _xtest.BenchmarkIndexHard2},

	{"BenchmarkIndexHard3", _xtest.BenchmarkIndexHard3},

	{"BenchmarkIndexHard4", _xtest.BenchmarkIndexHard4},

	{"BenchmarkLastIndexHard1", _xtest.BenchmarkLastIndexHard1},

	{"BenchmarkLastIndexHard2", _xtest.BenchmarkLastIndexHard2},

	{"BenchmarkLastIndexHard3", _xtest.BenchmarkLastIndexHard3},

	{"BenchmarkCountHard1", _xtest.BenchmarkCountHard1},

	{"BenchmarkCountHard2", _xtest.BenchmarkCountHard2},

	{"BenchmarkCountHard3", _xtest.BenchmarkCountHard3},

	{"BenchmarkIndexTorture", _xtest.BenchmarkIndexTorture},

	{"BenchmarkCountTorture", _xtest.BenchmarkCountTorture},

	{"BenchmarkCountTortureOverlapping", _xtest.BenchmarkCountTortureOverlapping},

	{"BenchmarkCountByte", _xtest.BenchmarkCountByte},

	{"BenchmarkFields", _xtest.BenchmarkFields},

	{"BenchmarkFieldsFunc", _xtest.BenchmarkFieldsFunc},

	{"BenchmarkSplitEmptySeparator", _xtest.BenchmarkSplitEmptySeparator},

	{"BenchmarkSplitSingleByteSeparator", _xtest.BenchmarkSplitSingleByteSeparator},

	{"BenchmarkSplitMultiByteSeparator", _xtest.BenchmarkSplitMultiByteSeparator},

	{"BenchmarkSplitNSingleByteSeparator", _xtest.BenchmarkSplitNSingleByteSeparator},

	{"BenchmarkSplitNMultiByteSeparator", _xtest.BenchmarkSplitNMultiByteSeparator},

	{"BenchmarkRepeat", _xtest.BenchmarkRepeat},

	{"BenchmarkIndexAnyASCII", _xtest.BenchmarkIndexAnyASCII},

	{"BenchmarkTrimASCII", _xtest.BenchmarkTrimASCII},

	{"BenchmarkIndexPeriodic", _xtest.BenchmarkIndexPeriodic},

}

var examples = []testing.InternalExample{

	{"ExampleFields", _xtest.ExampleFields, "Fields are: [\"foo\" \"bar\" \"baz\"]\n", false},

	{"ExampleFieldsFunc", _xtest.ExampleFieldsFunc, "Fields are: [\"foo1\" \"bar2\" \"baz3\"]\n", false},

	{"ExampleCompare", _xtest.ExampleCompare, "-1\n0\n1\n", false},

	{"ExampleContains", _xtest.ExampleContains, "true\nfalse\ntrue\ntrue\n", false},

	{"ExampleContainsAny", _xtest.ExampleContainsAny, "false\ntrue\nfalse\nfalse\n", false},

	{"ExampleContainsRune", _xtest.ExampleContainsRune, "true\nfalse\n", false},

	{"ExampleCount", _xtest.ExampleCount, "3\n5\n", false},

	{"ExampleEqualFold", _xtest.ExampleEqualFold, "true\n", false},

	{"ExampleHasPrefix", _xtest.ExampleHasPrefix, "true\nfalse\ntrue\n", false},

	{"ExampleHasSuffix", _xtest.ExampleHasSuffix, "true\nfalse\nfalse\ntrue\n", false},

	{"ExampleIndex", _xtest.ExampleIndex, "4\n-1\n", false},

	{"ExampleIndexFunc", _xtest.ExampleIndexFunc, "7\n-1\n", false},

	{"ExampleIndexAny", _xtest.ExampleIndexAny, "2\n-1\n", false},

	{"ExampleIndexByte", _xtest.ExampleIndexByte, "0\n3\n-1\n", false},

	{"ExampleIndexRune", _xtest.ExampleIndexRune, "4\n-1\n", false},

	{"ExampleLastIndex", _xtest.ExampleLastIndex, "0\n3\n-1\n", false},

	{"ExampleLastIndexAny", _xtest.ExampleLastIndexAny, "4\n8\n-1\n", false},

	{"ExampleLastIndexByte", _xtest.ExampleLastIndexByte, "10\n8\n-1\n", false},

	{"ExampleLastIndexFunc", _xtest.ExampleLastIndexFunc, "5\n2\n-1\n", false},

	{"ExampleJoin", _xtest.ExampleJoin, "foo, bar, baz\n", false},

	{"ExampleRepeat", _xtest.ExampleRepeat, "banana\n", false},

	{"ExampleReplace", _xtest.ExampleReplace, "oinky oinky oink\nmoo moo moo\n", false},

	{"ExampleSplit", _xtest.ExampleSplit, "[\"a\" \"b\" \"c\"]\n[\"\" \"man \" \"plan \" \"canal panama\"]\n[\" \" \"x\" \"y\" \"z\" \" \"]\n[\"\"]\n", false},

	{"ExampleSplitN", _xtest.ExampleSplitN, "[\"a\" \"b,c\"]\n[] (nil = true)\n", false},

	{"ExampleSplitAfter", _xtest.ExampleSplitAfter, "[\"a,\" \"b,\" \"c\"]\n", false},

	{"ExampleSplitAfterN", _xtest.ExampleSplitAfterN, "[\"a,\" \"b,c\"]\n", false},

	{"ExampleTitle", _xtest.ExampleTitle, "Her Royal Highness\n", false},

	{"ExampleToTitle", _xtest.ExampleToTitle, "LOUD NOISES\nХЛЕБ\n", false},

	{"ExampleToTitleSpecial", _xtest.ExampleToTitleSpecial, "DÜNYANIN İLK BORSA YAPISI AİZONAİ KABUL EDİLİR\n", false},

	{"ExampleMap", _xtest.ExampleMap, "'Gjnf oevyyvt naq gur fyvgul tbcure...\n", false},

	{"ExampleNewReplacer", _xtest.ExampleNewReplacer, "This is &lt;b&gt;HTML&lt;/b&gt;!\n", false},

	{"ExampleToUpper", _xtest.ExampleToUpper, "GOPHER\n", false},

	{"ExampleToUpperSpecial", _xtest.ExampleToUpperSpecial, "ÖRNEK İŞ\n", false},

	{"ExampleToLower", _xtest.ExampleToLower, "gopher\n", false},

	{"ExampleToLowerSpecial", _xtest.ExampleToLowerSpecial, "önnek iş\n", false},

	{"ExampleTrim", _xtest.ExampleTrim, "Hello, Gophers\n", false},

	{"ExampleTrimSpace", _xtest.ExampleTrimSpace, "Hello, Gophers\n", false},

	{"ExampleTrimPrefix", _xtest.ExampleTrimPrefix, "Gophers!!!\n", false},

	{"ExampleTrimSuffix", _xtest.ExampleTrimSuffix, "¡¡¡Hello\n", false},

	{"ExampleTrimFunc", _xtest.ExampleTrimFunc, "Hello, Gophers\n", false},

	{"ExampleTrimLeft", _xtest.ExampleTrimLeft, "Hello, Gophers!!!\n", false},

	{"ExampleTrimLeftFunc", _xtest.ExampleTrimLeftFunc, "Hello, Gophers!!!\n", false},

	{"ExampleTrimRight", _xtest.ExampleTrimRight, "¡¡¡Hello, Gophers\n", false},

	{"ExampleTrimRightFunc", _xtest.ExampleTrimRightFunc, "¡¡¡Hello, Gophers\n", false},

	{"ExampleBuilder", _xtest.ExampleBuilder, "3...2...1...ignition\n", false},

}

func init() {
	testdeps.ImportPath = "strings"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


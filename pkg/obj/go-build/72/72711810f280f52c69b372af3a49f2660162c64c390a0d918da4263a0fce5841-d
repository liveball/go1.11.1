
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "io"


	_xtest "io_test"


)

var tests = []testing.InternalTest{

	{"TestCopy", _xtest.TestCopy},

	{"TestCopyNegative", _xtest.TestCopyNegative},

	{"TestCopyBuffer", _xtest.TestCopyBuffer},

	{"TestCopyBufferNil", _xtest.TestCopyBufferNil},

	{"TestCopyReadFrom", _xtest.TestCopyReadFrom},

	{"TestCopyWriteTo", _xtest.TestCopyWriteTo},

	{"TestCopyPriority", _xtest.TestCopyPriority},

	{"TestCopyReadErrWriteErr", _xtest.TestCopyReadErrWriteErr},

	{"TestCopyN", _xtest.TestCopyN},

	{"TestCopyNReadFrom", _xtest.TestCopyNReadFrom},

	{"TestCopyNWriteTo", _xtest.TestCopyNWriteTo},

	{"TestCopyNEOF", _xtest.TestCopyNEOF},

	{"TestReadAtLeast", _xtest.TestReadAtLeast},

	{"TestReadAtLeastWithDataAndEOF", _xtest.TestReadAtLeastWithDataAndEOF},

	{"TestReadAtLeastWithDataAndError", _xtest.TestReadAtLeastWithDataAndError},

	{"TestTeeReader", _xtest.TestTeeReader},

	{"TestSectionReader_ReadAt", _xtest.TestSectionReader_ReadAt},

	{"TestSectionReader_Seek", _xtest.TestSectionReader_Seek},

	{"TestSectionReader_Size", _xtest.TestSectionReader_Size},

	{"TestMultiReader", _xtest.TestMultiReader},

	{"TestMultiWriter", _xtest.TestMultiWriter},

	{"TestMultiWriter_String", _xtest.TestMultiWriter_String},

	{"TestMultiWriter_WriteStringSingleAlloc", _xtest.TestMultiWriter_WriteStringSingleAlloc},

	{"TestMultiWriter_StringCheckCall", _xtest.TestMultiWriter_StringCheckCall},

	{"TestMultiWriterSingleChainFlatten", _xtest.TestMultiWriterSingleChainFlatten},

	{"TestMultiWriterError", _xtest.TestMultiWriterError},

	{"TestMultiReaderCopy", _xtest.TestMultiReaderCopy},

	{"TestMultiWriterCopy", _xtest.TestMultiWriterCopy},

	{"TestMultiReaderFlatten", _xtest.TestMultiReaderFlatten},

	{"TestMultiReaderSingleByteWithEOF", _xtest.TestMultiReaderSingleByteWithEOF},

	{"TestMultiReaderFinalEOF", _xtest.TestMultiReaderFinalEOF},

	{"TestMultiReaderFreesExhaustedReaders", _xtest.TestMultiReaderFreesExhaustedReaders},

	{"TestInterleavedMultiReader", _xtest.TestInterleavedMultiReader},

	{"TestPipe1", _xtest.TestPipe1},

	{"TestPipe2", _xtest.TestPipe2},

	{"TestPipe3", _xtest.TestPipe3},

	{"TestPipeReadClose", _xtest.TestPipeReadClose},

	{"TestPipeReadClose2", _xtest.TestPipeReadClose2},

	{"TestPipeWriteClose", _xtest.TestPipeWriteClose},

	{"TestPipeWriteClose2", _xtest.TestPipeWriteClose2},

	{"TestWriteEmpty", _xtest.TestWriteEmpty},

	{"TestWriteNil", _xtest.TestWriteNil},

	{"TestWriteAfterWriterClose", _xtest.TestWriteAfterWriterClose},

	{"TestPipeCloseError", _xtest.TestPipeCloseError},

	{"TestPipeConcurrent", _xtest.TestPipeConcurrent},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkCopyNSmall", _xtest.BenchmarkCopyNSmall},

	{"BenchmarkCopyNLarge", _xtest.BenchmarkCopyNLarge},

}

var examples = []testing.InternalExample{

	{"ExampleCopy", _xtest.ExampleCopy, "some io.Reader stream to be read\n", false},

	{"ExampleCopyBuffer", _xtest.ExampleCopyBuffer, "first reader\nsecond reader\n", false},

	{"ExampleCopyN", _xtest.ExampleCopyN, "some\n", false},

	{"ExampleReadAtLeast", _xtest.ExampleReadAtLeast, "some io.Reader stream to be read\n\nerror: short buffer\nerror: EOF\n", false},

	{"ExampleReadFull", _xtest.ExampleReadFull, "some\nerror: unexpected EOF\n", false},

	{"ExampleWriteString", _xtest.ExampleWriteString, "Hello World\n", false},

	{"ExampleLimitReader", _xtest.ExampleLimitReader, "some\n", false},

	{"ExampleMultiReader", _xtest.ExampleMultiReader, "first reader second reader third reader\n", false},

	{"ExampleTeeReader", _xtest.ExampleTeeReader, "some io.Reader stream to be read\nsome io.Reader stream to be read\n", false},

	{"ExampleSectionReader", _xtest.ExampleSectionReader, "io.Reader stream\n", false},

	{"ExampleSectionReader_ReadAt", _xtest.ExampleSectionReader_ReadAt, "stream\n", false},

	{"ExampleSectionReader_Seek", _xtest.ExampleSectionReader_Seek, "stream\n", false},

	{"ExampleSeeker_Seek", _xtest.ExampleSeeker_Seek, "some io.Reader stream to be read\nstream to be read\nread\n", false},

	{"ExampleMultiWriter", _xtest.ExampleMultiWriter, "some io.Reader stream to be read\nsome io.Reader stream to be read\n", false},

	{"ExamplePipe", _xtest.ExamplePipe, "some text to be read\n", false},

}

func init() {
	testdeps.ImportPath = "io"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


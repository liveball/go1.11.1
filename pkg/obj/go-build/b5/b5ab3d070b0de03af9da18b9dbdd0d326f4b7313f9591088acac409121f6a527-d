
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "crypto/x509"


	_ "crypto/x509_test"


)

var tests = []testing.InternalTest{

	{"TestConstraintCases", _test.TestConstraintCases},

	{"TestRFC2821Parsing", _test.TestRFC2821Parsing},

	{"TestBadNamesInConstraints", _test.TestBadNamesInConstraints},

	{"TestBadNamesInSANs", _test.TestBadNamesInSANs},

	{"TestDecrypt", _test.TestDecrypt},

	{"TestEncrypt", _test.TestEncrypt},

	{"TestIncompleteBlock", _test.TestIncompleteBlock},

	{"TestPKCS8", _test.TestPKCS8},

	{"TestSystemRoots", _test.TestSystemRoots},

	{"TestParseECPrivateKey", _test.TestParseECPrivateKey},

	{"TestGoVerify", _test.TestGoVerify},

	{"TestSystemVerify", _test.TestSystemVerify},

	{"TestUnknownAuthorityError", _test.TestUnknownAuthorityError},

	{"TestNameConstraints", _test.TestNameConstraints},

	{"TestValidHostname", _test.TestValidHostname},

	{"TestParsePKCS1PrivateKey", _test.TestParsePKCS1PrivateKey},

	{"TestParsePKIXPublicKey", _test.TestParsePKIXPublicKey},

	{"TestMarshalRSAPrivateKey", _test.TestMarshalRSAPrivateKey},

	{"TestMarshalRSAPublicKey", _test.TestMarshalRSAPublicKey},

	{"TestMatchHostnames", _test.TestMatchHostnames},

	{"TestMatchIP", _test.TestMatchIP},

	{"TestCertificateParse", _test.TestCertificateParse},

	{"TestMismatchedSignatureAlgorithm", _test.TestMismatchedSignatureAlgorithm},

	{"TestCreateSelfSignedCertificate", _test.TestCreateSelfSignedCertificate},

	{"TestECDSA", _test.TestECDSA},

	{"TestParseCertificateWithDsaPublicKey", _test.TestParseCertificateWithDsaPublicKey},

	{"TestParseCertificateWithDSASignatureAlgorithm", _test.TestParseCertificateWithDSASignatureAlgorithm},

	{"TestVerifyCertificateWithDSASignature", _test.TestVerifyCertificateWithDSASignature},

	{"TestRSAPSSSelfSigned", _test.TestRSAPSSSelfSigned},

	{"TestCRLCreation", _test.TestCRLCreation},

	{"TestParseDERCRL", _test.TestParseDERCRL},

	{"TestCRLWithoutExpiry", _test.TestCRLWithoutExpiry},

	{"TestParsePEMCRL", _test.TestParsePEMCRL},

	{"TestImports", _test.TestImports},

	{"TestCreateCertificateRequest", _test.TestCreateCertificateRequest},

	{"TestCertificateRequestOverrides", _test.TestCertificateRequestOverrides},

	{"TestParseCertificateRequest", _test.TestParseCertificateRequest},

	{"TestCriticalFlagInCSRRequestedExtensions", _test.TestCriticalFlagInCSRRequestedExtensions},

	{"TestMaxPathLen", _test.TestMaxPathLen},

	{"TestNoAuthorityKeyIdInSelfSignedCert", _test.TestNoAuthorityKeyIdInSelfSignedCert},

	{"TestASN1BitLength", _test.TestASN1BitLength},

	{"TestVerifyEmptyCertificate", _test.TestVerifyEmptyCertificate},

	{"TestInsecureAlgorithmErrorString", _test.TestInsecureAlgorithmErrorString},

	{"TestMD5", _test.TestMD5},

	{"TestRSAMissingNULLParameters", _test.TestRSAMissingNULLParameters},

	{"TestISOOIDInCertificate", _test.TestISOOIDInCertificate},

	{"TestMultipleRDN", _test.TestMultipleRDN},

	{"TestSystemCertPool", _test.TestSystemCertPool},

	{"TestEmptyNameConstraints", _test.TestEmptyNameConstraints},

	{"TestPKIXNameString", _test.TestPKIXNameString},

	{"TestRDNSequenceString", _test.TestRDNSequenceString},

	{"TestCriticalNameConstraintWithUnknownType", _test.TestCriticalNameConstraintWithUnknownType},

	{"TestBadIPMask", _test.TestBadIPMask},

	{"TestAdditionFieldsInGeneralSubtree", _test.TestAdditionFieldsInGeneralSubtree},

	{"TestEmptySubject", _test.TestEmptySubject},

	{"TestMultipleURLsInCRLDP", _test.TestMultipleURLsInCRLDP},

}

var benchmarks = []testing.InternalBenchmark{

}

var examples = []testing.InternalExample{

}

func init() {
	testdeps.ImportPath = "crypto/x509"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


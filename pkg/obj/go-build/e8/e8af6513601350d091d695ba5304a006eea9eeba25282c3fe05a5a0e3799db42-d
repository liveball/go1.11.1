
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_ "sync/atomic"


	_xtest "sync/atomic_test"


)

var tests = []testing.InternalTest{

	{"TestSwapInt32", _xtest.TestSwapInt32},

	{"TestSwapUint32", _xtest.TestSwapUint32},

	{"TestSwapInt64", _xtest.TestSwapInt64},

	{"TestSwapUint64", _xtest.TestSwapUint64},

	{"TestSwapUintptr", _xtest.TestSwapUintptr},

	{"TestSwapPointer", _xtest.TestSwapPointer},

	{"TestAddInt32", _xtest.TestAddInt32},

	{"TestAddUint32", _xtest.TestAddUint32},

	{"TestAddInt64", _xtest.TestAddInt64},

	{"TestAddUint64", _xtest.TestAddUint64},

	{"TestAddUintptr", _xtest.TestAddUintptr},

	{"TestCompareAndSwapInt32", _xtest.TestCompareAndSwapInt32},

	{"TestCompareAndSwapUint32", _xtest.TestCompareAndSwapUint32},

	{"TestCompareAndSwapInt64", _xtest.TestCompareAndSwapInt64},

	{"TestCompareAndSwapUint64", _xtest.TestCompareAndSwapUint64},

	{"TestCompareAndSwapUintptr", _xtest.TestCompareAndSwapUintptr},

	{"TestCompareAndSwapPointer", _xtest.TestCompareAndSwapPointer},

	{"TestLoadInt32", _xtest.TestLoadInt32},

	{"TestLoadUint32", _xtest.TestLoadUint32},

	{"TestLoadInt64", _xtest.TestLoadInt64},

	{"TestLoadUint64", _xtest.TestLoadUint64},

	{"TestLoadUintptr", _xtest.TestLoadUintptr},

	{"TestLoadPointer", _xtest.TestLoadPointer},

	{"TestStoreInt32", _xtest.TestStoreInt32},

	{"TestStoreUint32", _xtest.TestStoreUint32},

	{"TestStoreInt64", _xtest.TestStoreInt64},

	{"TestStoreUint64", _xtest.TestStoreUint64},

	{"TestStoreUintptr", _xtest.TestStoreUintptr},

	{"TestStorePointer", _xtest.TestStorePointer},

	{"TestHammer32", _xtest.TestHammer32},

	{"TestHammer64", _xtest.TestHammer64},

	{"TestHammerStoreLoad", _xtest.TestHammerStoreLoad},

	{"TestStoreLoadSeqCst32", _xtest.TestStoreLoadSeqCst32},

	{"TestStoreLoadSeqCst64", _xtest.TestStoreLoadSeqCst64},

	{"TestStoreLoadRelAcq32", _xtest.TestStoreLoadRelAcq32},

	{"TestStoreLoadRelAcq64", _xtest.TestStoreLoadRelAcq64},

	{"TestUnaligned64", _xtest.TestUnaligned64},

	{"TestNilDeref", _xtest.TestNilDeref},

	{"TestValue", _xtest.TestValue},

	{"TestValueLarge", _xtest.TestValueLarge},

	{"TestValuePanic", _xtest.TestValuePanic},

	{"TestValueConcurrent", _xtest.TestValueConcurrent},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkValueRead", _xtest.BenchmarkValueRead},

}

var examples = []testing.InternalExample{

}

func init() {
	testdeps.ImportPath = "sync/atomic"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}


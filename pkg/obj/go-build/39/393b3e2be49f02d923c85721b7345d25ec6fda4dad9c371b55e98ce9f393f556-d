
package main

import (

	"os"

	"testing"
	"testing/internal/testdeps"


	_test "encoding/binary"


	_xtest "encoding/binary_test"


)

var tests = []testing.InternalTest{

	{"TestLittleEndianRead", _test.TestLittleEndianRead},

	{"TestLittleEndianWrite", _test.TestLittleEndianWrite},

	{"TestLittleEndianPtrWrite", _test.TestLittleEndianPtrWrite},

	{"TestBigEndianRead", _test.TestBigEndianRead},

	{"TestBigEndianWrite", _test.TestBigEndianWrite},

	{"TestBigEndianPtrWrite", _test.TestBigEndianPtrWrite},

	{"TestReadSlice", _test.TestReadSlice},

	{"TestWriteSlice", _test.TestWriteSlice},

	{"TestReadBool", _test.TestReadBool},

	{"TestReadBoolSlice", _test.TestReadBoolSlice},

	{"TestSliceRoundTrip", _test.TestSliceRoundTrip},

	{"TestWriteT", _test.TestWriteT},

	{"TestBlankFields", _test.TestBlankFields},

	{"TestUnexportedRead", _test.TestUnexportedRead},

	{"TestReadErrorMsg", _test.TestReadErrorMsg},

	{"TestReadTruncated", _test.TestReadTruncated},

	{"TestEarlyBoundsChecks", _test.TestEarlyBoundsChecks},

	{"TestConstants", _test.TestConstants},

	{"TestVarint", _test.TestVarint},

	{"TestUvarint", _test.TestUvarint},

	{"TestBufferTooSmall", _test.TestBufferTooSmall},

	{"TestOverflow", _test.TestOverflow},

	{"TestNonCanonicalZero", _test.TestNonCanonicalZero},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkReadSlice1000Int32s", _test.BenchmarkReadSlice1000Int32s},

	{"BenchmarkReadStruct", _test.BenchmarkReadStruct},

	{"BenchmarkReadInts", _test.BenchmarkReadInts},

	{"BenchmarkWriteInts", _test.BenchmarkWriteInts},

	{"BenchmarkWriteSlice1000Int32s", _test.BenchmarkWriteSlice1000Int32s},

	{"BenchmarkPutUint16", _test.BenchmarkPutUint16},

	{"BenchmarkPutUint32", _test.BenchmarkPutUint32},

	{"BenchmarkPutUint64", _test.BenchmarkPutUint64},

	{"BenchmarkLittleEndianPutUint16", _test.BenchmarkLittleEndianPutUint16},

	{"BenchmarkLittleEndianPutUint32", _test.BenchmarkLittleEndianPutUint32},

	{"BenchmarkLittleEndianPutUint64", _test.BenchmarkLittleEndianPutUint64},

	{"BenchmarkPutUvarint32", _test.BenchmarkPutUvarint32},

	{"BenchmarkPutUvarint64", _test.BenchmarkPutUvarint64},

}

var examples = []testing.InternalExample{

	{"ExampleWrite", _xtest.ExampleWrite, "18 2d 44 54 fb 21 09 40\n", false},

	{"ExampleWrite_multi", _xtest.ExampleWrite_multi, "beefcafe\n", false},

	{"ExampleRead", _xtest.ExampleRead, "3.141592653589793\n", false},

	{"ExampleRead_multi", _xtest.ExampleRead_multi, "3.141592653589793\n255\n01 02 03\n61374\n", false},

	{"ExampleByteOrder_put", _xtest.ExampleByteOrder_put, "e8 03 d0 07\n", false},

	{"ExampleByteOrder_get", _xtest.ExampleByteOrder_get, "0x03e8 0x07d0\n", false},

	{"ExamplePutUvarint", _xtest.ExamplePutUvarint, "01\n02\n7f\n8001\nff01\n8002\n", false},

	{"ExamplePutVarint", _xtest.ExamplePutVarint, "8101\n7f\n03\n01\n00\n02\n04\n7e\n8001\n", false},

	{"ExampleUvarint", _xtest.ExampleUvarint, "1\n2\n127\n128\n255\n256\n", false},

	{"ExampleVarint", _xtest.ExampleVarint, "-65\n-64\n-2\n-1\n0\n1\n2\n63\n64\n", false},

}

func init() {
	testdeps.ImportPath = "encoding/binary"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, examples)

	os.Exit(m.Run())

}

